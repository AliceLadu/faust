.\" Manpage for Faust.
.\" Contact research@grame.fr to correct errors or typos.
.TH man 1 "19 November 2017" "1.0" "Faust man page"
.SH NAME
Faust \- DSP to C/C++, Rust, LLVM IR, JAVA, JavaScript, asm.js, WebAssembly (wast/wasm), Interpreter compiler
.SH SYNOPSIS
\fBfaust\fR [options] file1 [file2 ...]
.SH DESCRIPTION
Faust (Functional Audio Stream) is a functional programming language specifically designed for real-time signal processing and synthesis. Faust targets high-performance signal processing applications and audio plug-ins for a variety of platforms and standards.
.SH OPTIONS
.IP "-h, --help"
print help message

.IP "-v, --version"
print the compiler version

.IP "-d, --details"
print compilation details

.IP "-tg, --task-graph"
generate the internal task graph in dot format file

.IP "-sg, --signal-graph"
generate the internal signal graph in dot format file

.IP "-ps, --postscript"
generate a block-diagram representation of the program as a postscript file

.IP "-svg, --svg"
generate a block-diagram representation of the program as an SVG file

.IP "-mdoc, --mathdoc"
generate the mathematical documentation of a program in LaTeX format

.IP "-mdlang <l>, --mathdoc-lang <l>"
load mathdoc language <l> if translation file exists (<l> = en, fr, ...)

.IP "-stripmdoc, --strip-mdoc-tags"
strip mdoc tags when printing Faust -mdoc listings

.IP "-sd, --simplify-diagrams"
try to further simplify block-diagrams before drawing them

.IP "-f <n>, --fold <n>"
set fold threshold used during block-diagram generation (default 25 elements)

.IP "-mns <n>, --max-name-size <n>"
set max name size threshold during block-diagram generation (default 40 char)

.IP "-sn, --simple-names"
use simpler names (without arguments) during block-diagram generation

.IP "-xml"
generate an XML description file of the user interface

.IP "-json"
generate a JSON description file of the user interface

.IP "-blur, --shadow-blur"
add a shadow blur to SVG boxes

.IP "-lb, --left-balanced"
generate left-balanced expressions

.IP "-mb, --mid-balanced"
generate mid-balanced expressions (default)

.IP "-rb,  --right-balanced"
generate right-balanced expressions

.IP "-lt, --less-temporaries"
generate less-temporaries when compiling delay lines

.IP "-mcd <n>, --max-copy-delay <n>"
max delay threshold used to switch from copy based to ring buffer based delay lines (default 16 samples)

.IP "-mem, --memory"
memory allocate static in global state using a custom memory manager

.IP "-a <file>"
indicate the architecture file to use

.IP "-i, --inline-architecture-files"
inline all architecture files in the generated code

.IP "-cn <name>, --class-name <name>"
specify the name of the dsp class to be used instead of mydsp

.IP "-t <sec>, --timeout <sec>"
abort compilation after <sec> seconds (default 120)

.IP "-time, --compilation-time"
display timing information of the various compilation phases

.IP "-o <file>"
output file to use for the generated code

.IP "-scal, --scalar"
generate code as a single loop

.IP "-vec, --vectorize"
generate code as a DAG of multiple loops easier to auto vectorize

.IP "-vls <n>, --vec-loop-size <n>"
size of the vector DSP loop for auto-vectorization (experimental)

.IP "-vs <n>, --vec-size <n>"
size of the vector (default 32 samples)

.IP "-lv <n>, --loop-variant <n>"
Control how loops are generated [<n> = 0:fastest (default), 1:simple]

.IP "-omp, --openMP"
generate OpenMP pragmas, activates --vectorize option

.IP "-pl, --par-loop"
generate parallel loops in --openMP mode

.IP "-sch, --scheduler"
generate tasks and use a Work Stealing scheduler, activates --vectorize option

.IP "-ocl, --openCL"
generate tasks with OpenCL (experimental)

.IP "-cuda, --cuda"
generate tasks with CUDA (experimental)

.IP "-dfs, --deepFirstScheduling"
schedule vector loops in deep first order

.IP "-g, --groupTasks"
group single-threaded sequential tasks together when -omp or -sch is used

.IP "-fun, --funTasks"
separate tasks code as separated functions (in -vec, -sch, or -omp mode)

.IP "-lang <lang>, --language <lang>"
generate various output formats : c, ocpp, cpp, rust, java, js, ajs, llvm, cllvm, fir, wast/wasm, interp (default cpp)

.IP "-uim, --user-interface-macros"
add user interface macro definitions in the output code

.IP "-single, --single-precision-floats"
uses single-precisions floats for audio computations (default)

.IP "-double, --double-precision-floats"
uses double-precision floats for audio computations

.IP "-quad, --quad-precision-floats"
uses quad-precision floats for audio computations

.IP "-es 1|0, --enable-semantics 1|0"
use enable semantics when 1, and simple multiplication otherwise

.IP "-flist, --file-list"
list all the files used to eval process

.IP "-norm, --normalized-form"
prints signals in normalized form and exits

.IP "-A <dir>, --architecture-dir <dir>"
add the directory <dir> to the architecture search path

.IP "-I <dir>, --import-dir <dir>"
add the directory <dir> to the import search path

.IP "-L <file>, --library <file>"
link with the LLVM module <file>

.IP "-O <dir>, --output-dir <dir>"
specify the relative directory of where to the generated output code, but also additional generated files (SVG, XML...)

.IP "-e, --export-dsp"
export expanded DSP code (all included libraries)

.IP "-inpl, --in-place"
generate inplace code when input and output buffers are the same (in scalar mode only)

.IP "-inj <f>, --inject <f>"
inject source file <f> into architecture file instead of compiling a dsp file

.IP "-ftz, --flush-to-zero"
Adds flush-to-zero code to recursive signals [0:no (default), 1:fabs based, 2:mask based (fastest)]

.IP "-fm <fm-file> --fast-math <fm-file>"
uses optimized versions of mathematical functions implemented in the <fm-file> file, takes the '/faust/dsp/fastmath.cpp' file if 'def' is used


.SH SEE ALSO
.PP
.I http://faust.grame.fr
.SH BUGS
Please report bugs to:
.I https://github.com/grame-cncm/faust/issues
.SH AUTHOR
Copyright (C) 2002-2017, GRAME - Centre National de Creation Musicale. All rights reserved.
