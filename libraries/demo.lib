//#################################### demo.lib ##########################################
// This library contains a set of demo functions based on examples located in the
// `/examples` folder.
// 
// It should be used using the `dm` environment:
//
// ```
// dm = library("demo.lib");
// process = dm.functionCall;
// ```
//
// Another option is to import `stdfaust.lib` which already contains the `dm`
// environment:
//
// ```
// import("stdfaust.lib");
// process = dm.functionCall;
// ```
//########################################################################################

/************************************************************************
************************************************************************
FAUST library file
Copyright (C) 2003-2016 GRAME, Centre National de Creation Musicale
----------------------------------------------------------------------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2.1 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with the GNU C Library; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA.

EXCEPTION TO THE LGPL LICENSE : As a special exception, you may create a
larger FAUST program which directly or indirectly imports this library
file and still distribute the compiled code generated by the FAUST
compiler, or a modified version of this compiled code, under your own
copyright and license. This EXCEPTION TO THE LGPL LICENSE explicitly
grants you the right to freely choose the license for the resulting
compiled code. In particular the resulting compiled code has no obligation
to be LGPL or GPL. For example you are free to choose a commercial or
closed source license or any other license if you decide so.
************************************************************************
************************************************************************/

import("stdfaust.lib");

//====================================Analyzers===========================================
//========================================================================================

//----------------------`mth_octave_spectral_level_demo`----------------------
// Demonstrate mth_octave_spectral_level in a standalone GUI.
//
// #### Usage
// ```
// _ : mth_octave_spectral_level_demo(BandsPerOctave);
// _ : spectral_level_demo : _; // 2/3 octave
// ```
//------------------------------------------------------------
// TODO: author JOS and Orlarey, revised by RM 
mth_octave_spectral_level_demo(BPO) = component("spectralLevel.dsp")[M = BPO;];

spectral_level_demo = mth_octave_spectral_level_demo(1.5); // 2/3 octave


//======================================Filters===========================================
//========================================================================================

//--------------------------`parametric_eq_demo`------------------------------
// A parametric equalizer application.
// Based on examples/filtering/parametricEqualizer.dsp
//
// #### Usage:
//
// ```
// _ : parametric_eq_demo : _ ;
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
parametric_eq_demo = component("parametricEqualizer.dsp");


//-------------------`spectral_tilt_demo`-----------------------
// A spectral tilt application.
// Based on examples/filtering/parametricEqualizer.dsp
//
// #### Usage
//
// ```
// _ : spectral_tilt_demo(N) : _ ;
// ```
//
// Where:
//
// * `N`: filter order (integer)
//
// All other parameters interactive
//------------------------------------------------------------
// TODO: author JOS, revised by RM
spectral_tilt_demo(N) = component("spectralTilt.dsp")[O = N;];


//---------`mth_octave_filterbank_demo` and `filterbank_demo`-------------
// Graphic Equalizer: Each filter-bank output signal routes through a fader.
// Based on examples/filtering/filterBank.dsp
//
// #### Usage
//
// ```
// _ : mth_octave_filterbank_demo(M) : _
// _ : filterbank_demo : _
// ```
//
// Where: 
//
// * `N`: number of bands per octave
//--------------------------------------------------------------
// TODO: author JOS, revised by RM
mth_octave_filterbank_demo(N) = component("filterBank.dsp")[M = N;];

filterbank_demo = mth_octave_filterbank_demo(1); // octave-bands = default


//======================================Effects===========================================
//========================================================================================

//---------------------------`cubicnl_demo`--------------------------
// Distortion demo application.
// Based on examples/dynamic/distortion.dsp
//
// #### Usage: 
//
// ```
// _ : cubicnl_demo : _;
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
cubicnl_demo = component("distortion.dsp");


//----------------------------`gate_demo`-------------------------
// Gate demo application.
// Based on examples/dynamic/noiseGate.dsp
//
// #### Usage
// 
// ```
// _,_ : gate_demo : _,_;
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
gate_demo = component("noiseGate.dsp");


//----------------------------`compressor_demo`-------------------------
// Compressor demo application.
// Based on examples/dynamic/compressor.dsp
//
// #### Usage
//
// ```
// _,_ : compressor_demo : _,_;
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
compressor_demo = component("compressor.dsp");


// TODO: need a demo function for speakerbp

//-------------------------------`exciter`-------------------------------
// Psychoacoustic harmonic exciter, with GUI.
// Based on examples/psychoacoustic/harmonicExciter.dsp
//
// #### Usage
//
// ```
// _ : exciter : _
// ```
//
// #### References
//
// * <https://secure.aes.org/forum/pubs/ebriefs/?elib=16939>
// * <https://www.researchgate.net/publication/258333577_Modeling_the_Harmonic_Exciter>
//------------------------------------------------------------
// TODO: author PPriyanka Shekar + licence, etc., revised by RM
exciter = component("harmonicExciter.dsp");


//-------------------------`moog_vcf_demo`---------------------------
// Illustrate and compare all three Moog VCF implementations above.
// Based on examples/filtering/moogVCF.dsp
//
// #### Usage
// 
// ```
// _ : moog_vcf_demo : _;
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
moog_vcf_demo = component("moogVCF.dsp");


//-------------------------`wah4_demo`---------------------------
// Wah pedal application.
// Based on examples/filtering/wahPedal.dsp
//
// #### Usage
//
// ```
// _ : wah4_demo : _;
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
wah4_demo = component("wahPedal.dsp");


//-------------------------`crybaby_demo`---------------------------
// Crybaby effect application.
// Based on examples/filtering/cryBaby.dsp
//
// #### Usage
//
// ```
// _ : crybaby_demo : _ ;
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
crybaby_demo = component("cryBaby.dsp");


//----------------------------`vocoder_demo`-------------------------
// Use example of the vocoder function where an impulse train is used
// as excitation.
// Based on examples/filtering/vocoder.dsp
//
// #### Usage
//
// ```
// _ : vocoder_demo : _;
// ```
//------------------------------------------------------------
// TODO: author RM
vocoder_demo = component("vocoder.dsp");


//-------------------------`flanger_demo`---------------------------
// Flanger effect application.
// Based on examples/phasing/flanger.dsp
//
// #### Usage
//
// ```
// _,_ : flanger_demo : _,_;
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
flanger_demo = component("flanger.dsp");


//-------------------------`phaser2_demo`---------------------------
// Phaser effect demo application.
// Based on examples/phasing/phaser.dsp
//
// #### Usage
//
// ```
// _,_ : phaser2_demo : _,_;
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
phaser2_demo = component("phaser.dsp");


//----------------------------`freeverb_demo`-------------------------
// Freeverb demo application
// Based on examples/reverb/freeverb.dsp
//
// #### Usage
//
// ```
// _,_ : freeverb_demo : _,_;
// ```
//------------------------------------------------------------
// TODO: author RM
freeverb_demo = component("freeverb.dsp");



//---------------------`stereo_reverb_tester`--------------------
// Handy test inputs for reverberator demos below.
// Based on examples/reverb/reverbTester.dsp
// 
// #### Usage
// 
// ```
// _ : stereo_reverb_tester : _
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
stereo_reverb_tester(revin_group,x,y) = component("reverbTester.dsp");


//-------------------------`fdnrev0_demo`---------------------------
// A reverb application using `fdnrev0`.
// Based on examples/reverb/fdnrev.dsp
//
// #### Usage
//
// ```
// _,_ : fdnrev0_demo(N,NB,BBSO) : _,_
// ```
//
// Where:
//
// * `n`: Feedback Delay Network (FDN) order / number of delay lines used = 
// 	order of feedback matrix / 2, 4, 8, or 16 [extend primes array below for 
// 	32, 64, ...]
// * `nb`: Number of frequency bands / Number of (nearly) independent T60 controls
// 	/ Integer 3 or greater
// * `bbso` = Butterworth band-split order / order of lowpass/highpass bandsplit 
// 	used at each crossover freq / odd positive integer
//------------------------------------------------------------
// TODO: author JOS, revised by RM
fdnrev0_demo(n,nb,bbso) = component("fdnrev.dsp")[N = n; NB = nb; BBSO = bbso;];



//---------------------------`zita_rev_fdn_demo`------------------------------
// Reverb demo application based on `zita_rev_fdn`.
// Based on examples/reverb/zitaRevFDN.dsp
//
// #### Usage
//
// ```
// si.bus(8) : zita_rev_fdn_demo : si.bus(8)
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
zita_rev_fdn_demo = component("zitaRevFDN.dsp");



//----------------------------------`zita_rev1`------------------------------
// Example GUI for `zita_rev1_stereo` (mostly following the Linux `zita-rev1` GUI).
//
// Only the dry/wet and output level parameters are "dezippered" here.  If
// parameters are to be varied in real time, use `smooth(0.999)` or the like
// in the same way.
//
// #### Usage
//
// ```
// _,_ : zita_rev1 : _,_
// ```
//
// ### Reference
//
// <http://www.kokkinizita.net/linuxaudio/zita-rev1-doc/quickguide.html>
//------------------------------------------------------------
// TODO: author JOS, revised by RM
zita_rev1 = component("zitaRev.dsp");


//====================================Generators==========================================
//========================================================================================

//--------------------------`sawtooth_demo`---------------------------
// An application demonstrating the different sawtooth oscillators of Faust.
// Based on examples/generator/sawtoothLab.dsp
//
// #### Usage  
//
// ```
// sawtooth_demo : _
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
sawtooth_demo = component("sawtoothLab.dsp");


//----------------------`virtual_analog_oscillator_demo`----------------------
// Virtual analog oscillator demo application.
// Based on examples/generator/virtualAnalog.dsp
//
// #### Usage
//
// ```
// virtual_analog_oscillator_demo : _
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
virtual_analog_oscillator_demo = component("virtualAnalog.dsp");


//-------------------------- oscrs_demo ---------------------------
// Simple application demoing filter based oscillators.
//
// #### Usage
//
// ```
// oscrs_demo : _
// ```
//------------------------------------------------------------
// TODO: author JOS, revised by RM
oscrs_demo = component("filterOsc.dsp");

oscr_demo = oscrs_demo; // synonym




