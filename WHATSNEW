
							================
							| FAUST 0.9.46 |
							================

GRAME - Centre National de Creation Musicale - is happy to announce the release
of FAUST 0.9.46. This new release provides several fixes, additions and
improvements in particular in the examples, libraries and architecture files.

-------------
About FAUST :
-------------

FAUST (Functional Audio Stream) is a functional programming language
specifically designed for real-time signal processing and synthesis. A
distinctive characteristic of FAUST is to be fully compiled. The FAUST compiler
translates DSP specifications into very efficient C++ code that works at sample
level. It targets high-performance signal processing applications, libraries and
audio plug-ins for a variety of audio platforms and standards. A same FAUST
specification can be used to easily generate native JACK or ALSA applications,
as well as CSOUND, LADSPA, MAX/MSP, PD, Q, SC and VST plugins.  

The Faust distribution can be downloaded at:
http://sourceforge.net/projects/faudiostream

The GIT repository can be cloned with the following command :
git clone git://faudiostream.git.sourceforge.net/gitroot/faudiostream/faudiostream faust

Two mailing lists are available:
https://lists.sourceforge.net/lists/listinfo/faudiostream-devel
https://lists.sourceforge.net/lists/listinfo/faudiostream-users

In order to test FAUST without installing it, please refer to the
Online Faust Compiler (requires firefox): 
http://faust.grame.fr


======================== WHAT'S NEW ==============================


---------------
Architectures :
---------------
- supercollider : 
	- revised search-order for SuperCollider headers in Linux, 
	- enhancements to SuperCollider class and control name generation in faust2sc and supercollider.cpp, 
	- Faust prefix added to SuperCollider module name to conform with faust2supercollider script, 
	- default SynthDef with metadata support added to faust2supercollider and faust2sc
	- -DNO_LIBSNDFILE and -DNDEBUG added to Makefile.sccompile for conformity with faust2supercollider (Darwin)
- matlabplot : new -s <nnnnn> (skip) option allowing to skip <nnnnn> samples before printing
- netjack : IP and port paramaters added in netjack-dsp architecture, NetJack client now restart.
- iPhone : architecture files updated
- pure : bug fixes, realtime-friendly voice allocation fixes, support for metadata.
- puredata : on Darwin both 32 and 64-bits intel code are now generated


-----------
Libraries :
-----------
- effect.lib : moog_vcf_2bn added, minor zita_rev1 additions
- filter.lib : tf2np, tf2snp, and general ladder/lattice filters added
- osc : build for both i386 and x86_64 architectures on Mac OSX, corrects frames value in OSC IO architecture


----------
Examples :
----------
- improvements and bug corrections in faust-stk
- new examples for Faust-STK in /examples/faust-stk/pd-patches/fancy
- new description metadata tag in faust-stk examples


----------
Compiler :
----------
- Support for listings with accents and symbolic representation for numbers of type i/j.pi**k or i/j.e**k in automatic documentation system
- improved and simplified infinite loop detection during compilation, default compiler timeout set to 10 mn
- bug fix when counting recursive signals to draw
- compiling error with VC++ 2008 fix 


---------
Scripts :
---------
- option -utf8 added to faust2mathdoc allowing to recode the .dsp file to UTF-8 before being processed
- added -I/usr/local/lib/faust to faust2ladspa because faust2jack uses this solution for typical personal Linux
- faust2sc: added checkInputs method to generated UGen; SynthDef input signals wrapped in In.ar()
- faust2pd : updated to faust2pd-2.5


----------------
Acknowledgments:
----------------

Many persons have been contributing to the FAUST project by
providing code for the compiler, architecture files, libraries,
examples, documentation, scripts, bug reports, ideas, etc. 

I would like to thank them and especially: Fons Adriaensen, Tim Blechmann,
Tiziano Bole, Baktery Chanka, Thomas Charbonnel, Damien Cramet, Etienne Gaudrin,
Albert Graef, Stefan Kersten, Victor Lazzarini, Matthieu Leberre, Mathieu Leroi,
Kjetil Matheussen, Hermann Meyer, Romain Michon, Remy Muller, Sampo Savolainen,
Nicolas Scaringella, Stephen Sinclair, Travis Skare, Julius Smith, Michael
Wilson, as well as my colleagues at GRAME, in particular : Dominique Fober,
Stephane Letz and Karim Barkati, and from the ASTREE project : Jerome Barthelemy
(IRCAM), Alain Bonardi (IRCAM), Raffaele Ciavarella (IRCAM), Pierre Jouvelot
(Mines/ParisTech), Laurent Pottier (U. Saint-Etienne)

Yann Orlarey
GRAME

