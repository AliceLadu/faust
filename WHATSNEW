
							================
							| FAUST 0.9.43 |
							================

GRAME - Centre National de Creation Musicale - is happy to announce the release
of FAUST 0.9.43. 

This version provides a major reorganization of the architecture system for
better modularity and Open Sound Control (OSC) support. The code generation has
been improved and the compiler offers new output possibilities for example the
complete graph of the internal signal expressions as a .dot (graphviz) file. The
libraries and the examples have been extended: Julius Smith's libraries provides
several new filters and effects (including various reverbs) and Romain Michon
has ported the Synthesis Tool Kit (STK) to FAUST.

-------------
About FAUST :
-------------

FAUST (Functional Audio Stream) is a functional programming language
specifically designed for real-time signal processing and synthesis. A
distinctive characteristic of FAUST is to be fully compiled. The FAUST compiler
translates DSP specifications into very efficient C++ code that works at sample
level. It targets high-performance signal processing applications, libraries and
audio plug-ins for a variety of audio platforms and standards. A same FAUST
specification can be used to easily generate native JACK or ALSA applications,
as well as CSOUND, LADSPA, MAX/MSP, PD, Q, SC and VST plugins.  

The Faust distribution can be downloaded at:
http://sourceforge.net/projects/faudiostream

The GIT repository can be cloned with the following command :
git clone git://faudiostream.git.sourceforge.net/gitroot/faudiostream/faudiostream faust

Two mailing lists are available:
https://lists.sourceforge.net/lists/listinfo/faudiostream-devel
https://lists.sourceforge.net/lists/listinfo/faudiostream-users

In order to test FAUST without installing it, please refer to the
Online Faust Compiler (requires firefox): 
http://faust.grame.fr


======================== WHAT'S NEW ==============================

----------
Compiler :
----------
- Improved loop separation algorithm
- Improved SVG block-diagrams (useless cables removed, inverters, etc.)
- Better handling of search path and default directories
- Range of input audio signals widened to (-inf,+inf).
- New -cn <name> (or --class-name <name>). It allows to specify the name of the
  dsp class to be used instead of mydsp
- New -sg (--signal-graph) option to draw a graph of all internal signal
  expressions as a .dot (graphviz) file.
- Several bug correction in type system and faster type system inference 
  algorithm


-----------
Libraries :
-----------
- effects.lib : 
	- new moog VCF implementation
	- auto-wah effect
	- passive non-linear allpass filters
	- several new reverbs implementations based on feedback delay networks 
	  including Zita Rev1
	- square Rectangular Digital Waveguide Mesh
	
- filter.lib :
	- new ladder/lattice allpass filters
	- Regalia-Mitra second order peaking equalizer section


----------
Examples :
----------
- several new reverb examples

- Synthesis Tool Kit (STK) with many examples ported to Faust:

  WIND INSTRUMENTS

	- A simple clarinet (clarinet.dsp),
	- A clarinet with a tone hole model (blowHole.dsp),
	- A flute (flutestk.dsp),
	- A pan-flute (flute.dsp),
	- A brass instrument that can be used as a trumpet, a trombon, a french 
	  horn, etc. (brass.dsp),
	- A simple saxophone (saxophony.dsp),
	- A bottle where it is possible to blow threw the neck to make sound (blowBotle.dsp).

  STRING INSTRUMENTS

	- An acoustic finger bass (bass.dsp),
	- A bowed string instrument that can be used as a cello, a violin, etc. (bowed.dsp),
	- A simple sitar (sitar.dsp),
	- A nonlinear extended Karplus-Strong (NLFeks.dsp).

  KEYBOARDS INSTRUMENTS

	- A piano that uses commuted waveguide synthesis (piano.dsp),
	- An harpsichord (harpsi.dsp).

  PERCUSSION INSTRUMENTS

	- A tibetan bowl (tibetanBowl.dsp),
	- A wooden bare (uniBar.dsp),
	- An iron bare (tunedBar.dsp),
	- A glass bare (glassHarmonica.dsp),
	- A set of percussion instruments that use modal synthesis (modalBar.dsp).

  OTHER

	- A voice synthesizer (voiceForm.dsp),
	- A FM synthesizer that uses an nonlinear allpass filter (NLFfm.dsp).


----------
Tools :
----------
- faust2ladspa 
- faust2dssi 
- faust2supercollider
- faust2sig
- faust2sigviewer


--------------------
Architecture files :
--------------------
- Redesign of architecture files for better modularity. 
- Open Sound Control (OSC) support added to several architecture files.
- Knobs added to GTK architectures
- Architecture's licenses updated
- Improved file format to save and restore applications settings
- Revised Core Audio architecture
- DSSI architecture added
- netjack architecture allowing remote audio processing over LAN
- AVOIDDENORMALS support added for puredata, ladspa and other plugins
- support for group tooltip via new declare(0, ...) mecchanism


----------------
Acknowledgments:
----------------

Many persons have been contributing to the FAUST project by
providing code for the compiler, architecture files, libraries,
examples, documentation, scripts, bug reports, ideas, etc. 

I would like to thank them and especially: Fons Adriaensen, Tim Blechmann,
Tiziano Bole, Baktery Chanka, Thomas Charbonnel, Damien Cramet, Etienne Gaudrin,
Albert Graef, Stefan Kersten, Victor Lazzarini, Matthieu Leberre, Mathieu Leroi,
Kjetil Matheussen, Hermann Meyer, Romain Michon, Remy Muller, Sampo Savolainen,
Nicolas Scaringella, Stephen Sinclair, Travis Skare, Julius Smith, Michael
Wilson, as well as my colleagues at GRAME, in particular : Dominique Fober,
Stephane Letz and Karim Barkati, and from the ASTREE project : Jerome Barthelemy
(IRCAM), Alain Bonardi (IRCAM), Raffaele Ciavarella (IRCAM), Pierre Jouvelot
(Mines/ParisTech), Laurent Pottier (U. Saint-Etienne)

Yann Orlarey
GRAME

