// Generated by llvm2cpp - DO NOT MODIFY!


Module* llvm_32_module() {
 // Module Construction
 Module* mod = new Module("llvm_math_32.ll", getGlobalContext());
 mod->setDataLayout("e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-n8:16:32-S128");
 mod->setTargetTriple("i386-apple-macosx10.8.0");
 
 // Type Definitions
 ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 22);
 
 PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);
 
 PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 std::vector<Type*>FuncTy_3_args;
 FuncTy_3_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_3 = FunctionType::get(
  /*Result=*/PointerTy_2,
  /*Params=*/FuncTy_3_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_4 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 std::vector<Type*>FuncTy_6_args;
 FuncTy_6_args.push_back(PointerTy_2);
 FunctionType* FuncTy_6 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_6_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_5 = PointerType::get(FuncTy_6, 0);
 
 PointerType* PointerTy_7 = PointerType::get(FuncTy_3, 0);
 
 std::vector<Type*>FuncTy_8_args;
 FuncTy_8_args.push_back(PointerTy_2);
 FunctionType* FuncTy_8 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_8_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_9 = PointerType::get(PointerTy_2, 0);
 
 PointerType* PointerTy_10 = PointerType::get(FuncTy_8, 0);
 
 std::vector<Type*>FuncTy_11_args;
 FuncTy_11_args.push_back(Type::getFloatTy(mod->getContext()));
 FunctionType* FuncTy_11 = FunctionType::get(
  /*Result=*/Type::getFloatTy(mod->getContext()),
  /*Params=*/FuncTy_11_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_12 = PointerType::get(Type::getFloatTy(mod->getContext()), 0);
 
 std::vector<Type*>FuncTy_14_args;
 FuncTy_14_args.push_back(Type::getDoubleTy(mod->getContext()));
 FunctionType* FuncTy_14 = FunctionType::get(
  /*Result=*/Type::getDoubleTy(mod->getContext()),
  /*Params=*/FuncTy_14_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_13 = PointerType::get(FuncTy_14, 0);
 
 std::vector<Type*>FuncTy_15_args;
 FuncTy_15_args.push_back(Type::getFloatTy(mod->getContext()));
 FuncTy_15_args.push_back(Type::getFloatTy(mod->getContext()));
 FunctionType* FuncTy_15 = FunctionType::get(
  /*Result=*/Type::getFloatTy(mod->getContext()),
  /*Params=*/FuncTy_15_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_17_args;
 FuncTy_17_args.push_back(Type::getDoubleTy(mod->getContext()));
 FuncTy_17_args.push_back(Type::getDoubleTy(mod->getContext()));
 FunctionType* FuncTy_17 = FunctionType::get(
  /*Result=*/Type::getDoubleTy(mod->getContext()),
  /*Params=*/FuncTy_17_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_16 = PointerType::get(FuncTy_17, 0);
 
 
 // Function Declarations
 
 Function* func_llvm_malloc = mod->getFunction("llvm_malloc");
 if (!func_llvm_malloc) {
 func_llvm_malloc = Function::Create(
  /*Type=*/FuncTy_3,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"llvm_malloc", mod); 
 func_llvm_malloc->setCallingConv(CallingConv::C);
 }
 AttributeSet func_llvm_malloc_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_llvm_malloc_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_llvm_malloc->setAttributes(func_llvm_malloc_PAL);
 
 Function* func_printf = mod->getFunction("printf");
 if (!func_printf) {
 func_printf = Function::Create(
  /*Type=*/FuncTy_6,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"printf", mod); // (external, no body)
 func_printf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_printf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_printf->setAttributes(func_printf_PAL);
 
 Function* func_malloc = mod->getFunction("malloc");
 if (!func_malloc) {
 func_malloc = Function::Create(
  /*Type=*/FuncTy_3,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"malloc", mod); // (external, no body)
 func_malloc->setCallingConv(CallingConv::C);
 }
 AttributeSet func_malloc_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_malloc_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_malloc->setAttributes(func_malloc_PAL);
 
 Function* func_llvm_free = mod->getFunction("llvm_free");
 if (!func_llvm_free) {
 func_llvm_free = Function::Create(
  /*Type=*/FuncTy_8,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"llvm_free", mod); 
 func_llvm_free->setCallingConv(CallingConv::C);
 }
 AttributeSet func_llvm_free_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_llvm_free_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_llvm_free->setAttributes(func_llvm_free_PAL);
 
 Function* func_free = mod->getFunction("free");
 if (!func_free) {
 func_free = Function::Create(
  /*Type=*/FuncTy_8,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"free", mod); // (external, no body)
 func_free->setCallingConv(CallingConv::C);
 }
 AttributeSet func_free_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_free_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_free->setAttributes(func_free_PAL);
 
 Function* func_fabsf = mod->getFunction("fabsf");
 if (!func_fabsf) {
 func_fabsf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"fabsf", mod); 
 func_fabsf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_fabsf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_fabsf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_fabsf->setAttributes(func_fabsf_PAL);
 
 Function* func_fabs = mod->getFunction("fabs");
 if (!func_fabs) {
 func_fabs = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"fabs", mod); // (external, no body)
 func_fabs->setCallingConv(CallingConv::C);
 }
 AttributeSet func_fabs_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_fabs_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_fabs->setAttributes(func_fabs_PAL);
 
 Function* func_acosf = mod->getFunction("acosf");
 if (!func_acosf) {
 func_acosf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"acosf", mod); 
 func_acosf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_acosf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_acosf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_acosf->setAttributes(func_acosf_PAL);
 
 Function* func_acos = mod->getFunction("acos");
 if (!func_acos) {
 func_acos = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"acos", mod); // (external, no body)
 func_acos->setCallingConv(CallingConv::C);
 }
 AttributeSet func_acos_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_acos_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_acos->setAttributes(func_acos_PAL);
 
 Function* func_asinf = mod->getFunction("asinf");
 if (!func_asinf) {
 func_asinf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"asinf", mod); 
 func_asinf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_asinf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_asinf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_asinf->setAttributes(func_asinf_PAL);
 
 Function* func_asin = mod->getFunction("asin");
 if (!func_asin) {
 func_asin = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"asin", mod); // (external, no body)
 func_asin->setCallingConv(CallingConv::C);
 }
 AttributeSet func_asin_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_asin_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_asin->setAttributes(func_asin_PAL);
 
 Function* func_atanf = mod->getFunction("atanf");
 if (!func_atanf) {
 func_atanf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"atanf", mod); 
 func_atanf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_atanf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_atanf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_atanf->setAttributes(func_atanf_PAL);
 
 Function* func_atan = mod->getFunction("atan");
 if (!func_atan) {
 func_atan = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"atan", mod); // (external, no body)
 func_atan->setCallingConv(CallingConv::C);
 }
 AttributeSet func_atan_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_atan_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_atan->setAttributes(func_atan_PAL);
 
 Function* func_atan2f = mod->getFunction("atan2f");
 if (!func_atan2f) {
 func_atan2f = Function::Create(
  /*Type=*/FuncTy_15,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"atan2f", mod); 
 func_atan2f->setCallingConv(CallingConv::C);
 }
 AttributeSet func_atan2f_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_atan2f_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_atan2f->setAttributes(func_atan2f_PAL);
 
 Function* func_atan2 = mod->getFunction("atan2");
 if (!func_atan2) {
 func_atan2 = Function::Create(
  /*Type=*/FuncTy_17,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"atan2", mod); // (external, no body)
 func_atan2->setCallingConv(CallingConv::C);
 }
 AttributeSet func_atan2_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_atan2_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_atan2->setAttributes(func_atan2_PAL);
 
 Function* func_ceilf = mod->getFunction("ceilf");
 if (!func_ceilf) {
 func_ceilf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"ceilf", mod); 
 func_ceilf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_ceilf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_ceilf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_ceilf->setAttributes(func_ceilf_PAL);
 
 Function* func_ceil = mod->getFunction("ceil");
 if (!func_ceil) {
 func_ceil = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"ceil", mod); // (external, no body)
 func_ceil->setCallingConv(CallingConv::C);
 }
 AttributeSet func_ceil_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_ceil_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_ceil->setAttributes(func_ceil_PAL);
 
 Function* func_cosf = mod->getFunction("cosf");
 if (!func_cosf) {
 func_cosf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"cosf", mod); 
 func_cosf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_cosf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_cosf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_cosf->setAttributes(func_cosf_PAL);
 
 Function* func_cos = mod->getFunction("cos");
 if (!func_cos) {
 func_cos = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"cos", mod); // (external, no body)
 func_cos->setCallingConv(CallingConv::C);
 }
 AttributeSet func_cos_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_cos_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_cos->setAttributes(func_cos_PAL);
 
 Function* func_coshf = mod->getFunction("coshf");
 if (!func_coshf) {
 func_coshf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"coshf", mod); 
 func_coshf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_coshf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_coshf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_coshf->setAttributes(func_coshf_PAL);
 
 Function* func_cosh = mod->getFunction("cosh");
 if (!func_cosh) {
 func_cosh = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"cosh", mod); // (external, no body)
 func_cosh->setCallingConv(CallingConv::C);
 }
 AttributeSet func_cosh_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_cosh_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_cosh->setAttributes(func_cosh_PAL);
 
 Function* func_expf = mod->getFunction("expf");
 if (!func_expf) {
 func_expf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"expf", mod); 
 func_expf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_expf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_expf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_expf->setAttributes(func_expf_PAL);
 
 Function* func_exp = mod->getFunction("exp");
 if (!func_exp) {
 func_exp = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"exp", mod); // (external, no body)
 func_exp->setCallingConv(CallingConv::C);
 }
 AttributeSet func_exp_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_exp_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_exp->setAttributes(func_exp_PAL);
 
 Function* func_floorf = mod->getFunction("floorf");
 if (!func_floorf) {
 func_floorf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"floorf", mod); 
 func_floorf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_floorf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_floorf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_floorf->setAttributes(func_floorf_PAL);
 
 Function* func_floor = mod->getFunction("floor");
 if (!func_floor) {
 func_floor = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"floor", mod); // (external, no body)
 func_floor->setCallingConv(CallingConv::C);
 }
 AttributeSet func_floor_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_floor_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_floor->setAttributes(func_floor_PAL);
 
 Function* func_fmodf = mod->getFunction("fmodf");
 if (!func_fmodf) {
 func_fmodf = Function::Create(
  /*Type=*/FuncTy_15,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"fmodf", mod); 
 func_fmodf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_fmodf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_fmodf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_fmodf->setAttributes(func_fmodf_PAL);
 
 Function* func_fmod = mod->getFunction("fmod");
 if (!func_fmod) {
 func_fmod = Function::Create(
  /*Type=*/FuncTy_17,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"fmod", mod); // (external, no body)
 func_fmod->setCallingConv(CallingConv::C);
 }
 AttributeSet func_fmod_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_fmod_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_fmod->setAttributes(func_fmod_PAL);
 
 Function* func_logf = mod->getFunction("logf");
 if (!func_logf) {
 func_logf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"logf", mod); 
 func_logf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_logf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_logf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_logf->setAttributes(func_logf_PAL);
 
 Function* func_log = mod->getFunction("log");
 if (!func_log) {
 func_log = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"log", mod); // (external, no body)
 func_log->setCallingConv(CallingConv::C);
 }
 AttributeSet func_log_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_log_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_log->setAttributes(func_log_PAL);
 
 Function* func_log10f = mod->getFunction("log10f");
 if (!func_log10f) {
 func_log10f = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"log10f", mod); 
 func_log10f->setCallingConv(CallingConv::C);
 }
 AttributeSet func_log10f_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_log10f_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_log10f->setAttributes(func_log10f_PAL);
 
 Function* func_log10 = mod->getFunction("log10");
 if (!func_log10) {
 func_log10 = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"log10", mod); // (external, no body)
 func_log10->setCallingConv(CallingConv::C);
 }
 AttributeSet func_log10_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_log10_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_log10->setAttributes(func_log10_PAL);
 
 Function* func_powf = mod->getFunction("powf");
 if (!func_powf) {
 func_powf = Function::Create(
  /*Type=*/FuncTy_15,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"powf", mod); 
 func_powf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_powf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_powf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_powf->setAttributes(func_powf_PAL);
 
 Function* func_llvm_pow_f64 = mod->getFunction("llvm.pow.f64");
 if (!func_llvm_pow_f64) {
 func_llvm_pow_f64 = Function::Create(
  /*Type=*/FuncTy_17,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"llvm.pow.f64", mod); // (external, no body)
 func_llvm_pow_f64->setCallingConv(CallingConv::C);
 }
 AttributeSet func_llvm_pow_f64_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadOnly);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_llvm_pow_f64_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_llvm_pow_f64->setAttributes(func_llvm_pow_f64_PAL);
 
 Function* func_roundf = mod->getFunction("roundf");
 if (!func_roundf) {
 func_roundf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"roundf", mod); 
 func_roundf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_roundf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_roundf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_roundf->setAttributes(func_roundf_PAL);
 
 Function* func_round = mod->getFunction("round");
 if (!func_round) {
 func_round = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"round", mod); // (external, no body)
 func_round->setCallingConv(CallingConv::C);
 }
 AttributeSet func_round_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_round_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_round->setAttributes(func_round_PAL);
 
 Function* func_sinf = mod->getFunction("sinf");
 if (!func_sinf) {
 func_sinf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"sinf", mod); 
 func_sinf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_sinf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_sinf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_sinf->setAttributes(func_sinf_PAL);
 
 Function* func_sin = mod->getFunction("sin");
 if (!func_sin) {
 func_sin = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"sin", mod); // (external, no body)
 func_sin->setCallingConv(CallingConv::C);
 }
 AttributeSet func_sin_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_sin_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_sin->setAttributes(func_sin_PAL);
 
 Function* func_sinhf = mod->getFunction("sinhf");
 if (!func_sinhf) {
 func_sinhf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"sinhf", mod); 
 func_sinhf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_sinhf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_sinhf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_sinhf->setAttributes(func_sinhf_PAL);
 
 Function* func_sinh = mod->getFunction("sinh");
 if (!func_sinh) {
 func_sinh = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"sinh", mod); // (external, no body)
 func_sinh->setCallingConv(CallingConv::C);
 }
 AttributeSet func_sinh_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_sinh_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_sinh->setAttributes(func_sinh_PAL);
 
 Function* func_sqrtf = mod->getFunction("sqrtf");
 if (!func_sqrtf) {
 func_sqrtf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"sqrtf", mod); 
 func_sqrtf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_sqrtf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_sqrtf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_sqrtf->setAttributes(func_sqrtf_PAL);
 
 Function* func_sqrt = mod->getFunction("sqrt");
 if (!func_sqrt) {
 func_sqrt = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"sqrt", mod); // (external, no body)
 func_sqrt->setCallingConv(CallingConv::C);
 }
 AttributeSet func_sqrt_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_sqrt_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_sqrt->setAttributes(func_sqrt_PAL);
 
 Function* func_tanf = mod->getFunction("tanf");
 if (!func_tanf) {
 func_tanf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"tanf", mod); 
 func_tanf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_tanf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_tanf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_tanf->setAttributes(func_tanf_PAL);
 
 Function* func_tan = mod->getFunction("tan");
 if (!func_tan) {
 func_tan = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"tan", mod); // (external, no body)
 func_tan->setCallingConv(CallingConv::C);
 }
 AttributeSet func_tan_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_tan_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_tan->setAttributes(func_tan_PAL);
 
 Function* func_tanhf = mod->getFunction("tanhf");
 if (!func_tanhf) {
 func_tanhf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"tanhf", mod); 
 func_tanhf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_tanhf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    B.addAttribute(Attribute::StackProtect);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_tanhf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_tanhf->setAttributes(func_tanhf_PAL);
 
 Function* func_tanh = mod->getFunction("tanh");
 if (!func_tanh) {
 func_tanh = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"tanh", mod); // (external, no body)
 func_tanh->setCallingConv(CallingConv::C);
 }
 AttributeSet func_tanh_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_tanh_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_tanh->setAttributes(func_tanh_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 // Constant Definitions
 Constant *const_array_18 = ConstantDataArray::getString(mod->getContext(), "SIZE OF MALLOC = %zi\x0A", true);
 ConstantInt* const_int32_19 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 std::vector<Constant*> const_ptr_20_indices;
 ConstantInt* const_int32_21 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 const_ptr_20_indices.push_back(const_int32_21);
 const_ptr_20_indices.push_back(const_int32_21);
 Constant* const_ptr_20 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_20_indices);
 
 // Global Variable Definitions
 gvar_array__str->setInitializer(const_array_18);
 
 // Function Definitions
 
 // Function: llvm_malloc (func_llvm_malloc)
 {
  Function::arg_iterator args = func_llvm_malloc->arg_begin();
  Value* int32_size = args++;
  int32_size->setName("size");
  
  BasicBlock* label_22 = BasicBlock::Create(mod->getContext(), "",func_llvm_malloc,0);
  
  // Block  (label_22)
  AllocaInst* ptr_23 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_22);
  ptr_23->setAlignment(4);
  StoreInst* void_24 = new StoreInst(int32_size, ptr_23, false, label_22);
  void_24->setAlignment(4);
  LoadInst* int32_25 = new LoadInst(ptr_23, "", false, label_22);
  int32_25->setAlignment(4);
  std::vector<Value*> int32_26_params;
  int32_26_params.push_back(const_ptr_20);
  int32_26_params.push_back(int32_25);
  CallInst* int32_26 = CallInst::Create(func_printf, int32_26_params, "", label_22);
  int32_26->setCallingConv(CallingConv::C);
  int32_26->setTailCall(false);
  AttributeSet int32_26_PAL;
  int32_26->setAttributes(int32_26_PAL);
  
  LoadInst* int32_27 = new LoadInst(ptr_23, "", false, label_22);
  int32_27->setAlignment(4);
  CallInst* ptr_28 = CallInst::Create(func_malloc, int32_27, "", label_22);
  ptr_28->setCallingConv(CallingConv::C);
  ptr_28->setTailCall(false);
  AttributeSet ptr_28_PAL;
  ptr_28->setAttributes(ptr_28_PAL);
  
  ReturnInst::Create(mod->getContext(), ptr_28, label_22);
  
 }
 
 // Function: llvm_free (func_llvm_free)
 {
  Function::arg_iterator args = func_llvm_free->arg_begin();
  Value* ptr_ptr = args++;
  ptr_ptr->setName("ptr");
  
  BasicBlock* label_30 = BasicBlock::Create(mod->getContext(), "",func_llvm_free,0);
  
  // Block  (label_30)
  AllocaInst* ptr_31 = new AllocaInst(PointerTy_2, "", label_30);
  ptr_31->setAlignment(4);
  StoreInst* void_32 = new StoreInst(ptr_ptr, ptr_31, false, label_30);
  void_32->setAlignment(4);
  LoadInst* ptr_33 = new LoadInst(ptr_31, "", false, label_30);
  ptr_33->setAlignment(4);
  CallInst* void_34 = CallInst::Create(func_free, ptr_33, "", label_30);
  void_34->setCallingConv(CallingConv::C);
  void_34->setTailCall(false);
  AttributeSet void_34_PAL;
  void_34->setAttributes(void_34_PAL);
  
  ReturnInst::Create(mod->getContext(), label_30);
  
 }
 
 // Function: fabsf (func_fabsf)
 {
  Function::arg_iterator args = func_fabsf->arg_begin();
  Value* float_x = args++;
  float_x->setName("x");
  
  BasicBlock* label_36 = BasicBlock::Create(mod->getContext(), "",func_fabsf,0);
  
  // Block  (label_36)
  AllocaInst* ptr_37 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_36);
  ptr_37->setAlignment(4);
  StoreInst* void_38 = new StoreInst(float_x, ptr_37, false, label_36);
  void_38->setAlignment(4);
  LoadInst* float_39 = new LoadInst(ptr_37, "", false, label_36);
  float_39->setAlignment(4);
  CastInst* double_40 = new FPExtInst(float_39, Type::getDoubleTy(mod->getContext()), "", label_36);
  CallInst* double_41 = CallInst::Create(func_fabs, double_40, "", label_36);
  double_41->setCallingConv(CallingConv::C);
  double_41->setTailCall(false);
  AttributeSet double_41_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_41_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_41->setAttributes(double_41_PAL);
  
  CastInst* float_42 = new FPTruncInst(double_41, Type::getFloatTy(mod->getContext()), "", label_36);
  ReturnInst::Create(mod->getContext(), float_42, label_36);
  
 }
 
 // Function: acosf (func_acosf)
 {
  Function::arg_iterator args = func_acosf->arg_begin();
  Value* float_x_44 = args++;
  float_x_44->setName("x");
  
  BasicBlock* label_45 = BasicBlock::Create(mod->getContext(), "",func_acosf,0);
  
  // Block  (label_45)
  AllocaInst* ptr_46 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_45);
  ptr_46->setAlignment(4);
  StoreInst* void_47 = new StoreInst(float_x_44, ptr_46, false, label_45);
  void_47->setAlignment(4);
  LoadInst* float_48 = new LoadInst(ptr_46, "", false, label_45);
  float_48->setAlignment(4);
  CastInst* double_49 = new FPExtInst(float_48, Type::getDoubleTy(mod->getContext()), "", label_45);
  CallInst* double_50 = CallInst::Create(func_acos, double_49, "", label_45);
  double_50->setCallingConv(CallingConv::C);
  double_50->setTailCall(false);
  AttributeSet double_50_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_50_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_50->setAttributes(double_50_PAL);
  
  CastInst* float_51 = new FPTruncInst(double_50, Type::getFloatTy(mod->getContext()), "", label_45);
  ReturnInst::Create(mod->getContext(), float_51, label_45);
  
 }
 
 // Function: asinf (func_asinf)
 {
  Function::arg_iterator args = func_asinf->arg_begin();
  Value* float_x_53 = args++;
  float_x_53->setName("x");
  
  BasicBlock* label_54 = BasicBlock::Create(mod->getContext(), "",func_asinf,0);
  
  // Block  (label_54)
  AllocaInst* ptr_55 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_54);
  ptr_55->setAlignment(4);
  StoreInst* void_56 = new StoreInst(float_x_53, ptr_55, false, label_54);
  void_56->setAlignment(4);
  LoadInst* float_57 = new LoadInst(ptr_55, "", false, label_54);
  float_57->setAlignment(4);
  CastInst* double_58 = new FPExtInst(float_57, Type::getDoubleTy(mod->getContext()), "", label_54);
  CallInst* double_59 = CallInst::Create(func_asin, double_58, "", label_54);
  double_59->setCallingConv(CallingConv::C);
  double_59->setTailCall(false);
  AttributeSet double_59_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_59_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_59->setAttributes(double_59_PAL);
  
  CastInst* float_60 = new FPTruncInst(double_59, Type::getFloatTy(mod->getContext()), "", label_54);
  ReturnInst::Create(mod->getContext(), float_60, label_54);
  
 }
 
 // Function: atanf (func_atanf)
 {
  Function::arg_iterator args = func_atanf->arg_begin();
  Value* float_x_62 = args++;
  float_x_62->setName("x");
  
  BasicBlock* label_63 = BasicBlock::Create(mod->getContext(), "",func_atanf,0);
  
  // Block  (label_63)
  AllocaInst* ptr_64 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_63);
  ptr_64->setAlignment(4);
  StoreInst* void_65 = new StoreInst(float_x_62, ptr_64, false, label_63);
  void_65->setAlignment(4);
  LoadInst* float_66 = new LoadInst(ptr_64, "", false, label_63);
  float_66->setAlignment(4);
  CastInst* double_67 = new FPExtInst(float_66, Type::getDoubleTy(mod->getContext()), "", label_63);
  CallInst* double_68 = CallInst::Create(func_atan, double_67, "", label_63);
  double_68->setCallingConv(CallingConv::C);
  double_68->setTailCall(false);
  AttributeSet double_68_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_68_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_68->setAttributes(double_68_PAL);
  
  CastInst* float_69 = new FPTruncInst(double_68, Type::getFloatTy(mod->getContext()), "", label_63);
  ReturnInst::Create(mod->getContext(), float_69, label_63);
  
 }
 
 // Function: atan2f (func_atan2f)
 {
  Function::arg_iterator args = func_atan2f->arg_begin();
  Value* float_x_71 = args++;
  float_x_71->setName("x");
  Value* float_y = args++;
  float_y->setName("y");
  
  BasicBlock* label_72 = BasicBlock::Create(mod->getContext(), "",func_atan2f,0);
  
  // Block  (label_72)
  AllocaInst* ptr_73 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_72);
  ptr_73->setAlignment(4);
  AllocaInst* ptr_74 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_72);
  ptr_74->setAlignment(4);
  StoreInst* void_75 = new StoreInst(float_x_71, ptr_73, false, label_72);
  void_75->setAlignment(4);
  StoreInst* void_76 = new StoreInst(float_y, ptr_74, false, label_72);
  void_76->setAlignment(4);
  LoadInst* float_77 = new LoadInst(ptr_73, "", false, label_72);
  float_77->setAlignment(4);
  CastInst* double_78 = new FPExtInst(float_77, Type::getDoubleTy(mod->getContext()), "", label_72);
  LoadInst* float_79 = new LoadInst(ptr_74, "", false, label_72);
  float_79->setAlignment(4);
  CastInst* double_80 = new FPExtInst(float_79, Type::getDoubleTy(mod->getContext()), "", label_72);
  std::vector<Value*> double_81_params;
  double_81_params.push_back(double_78);
  double_81_params.push_back(double_80);
  CallInst* double_81 = CallInst::Create(func_atan2, double_81_params, "", label_72);
  double_81->setCallingConv(CallingConv::C);
  double_81->setTailCall(false);
  AttributeSet double_81_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_81_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_81->setAttributes(double_81_PAL);
  
  CastInst* float_82 = new FPTruncInst(double_81, Type::getFloatTy(mod->getContext()), "", label_72);
  ReturnInst::Create(mod->getContext(), float_82, label_72);
  
 }
 
 // Function: ceilf (func_ceilf)
 {
  Function::arg_iterator args = func_ceilf->arg_begin();
  Value* float_x_84 = args++;
  float_x_84->setName("x");
  
  BasicBlock* label_85 = BasicBlock::Create(mod->getContext(), "",func_ceilf,0);
  
  // Block  (label_85)
  AllocaInst* ptr_86 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_85);
  ptr_86->setAlignment(4);
  StoreInst* void_87 = new StoreInst(float_x_84, ptr_86, false, label_85);
  void_87->setAlignment(4);
  LoadInst* float_88 = new LoadInst(ptr_86, "", false, label_85);
  float_88->setAlignment(4);
  CastInst* double_89 = new FPExtInst(float_88, Type::getDoubleTy(mod->getContext()), "", label_85);
  CallInst* double_90 = CallInst::Create(func_ceil, double_89, "", label_85);
  double_90->setCallingConv(CallingConv::C);
  double_90->setTailCall(false);
  AttributeSet double_90_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_90_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_90->setAttributes(double_90_PAL);
  
  CastInst* float_91 = new FPTruncInst(double_90, Type::getFloatTy(mod->getContext()), "", label_85);
  ReturnInst::Create(mod->getContext(), float_91, label_85);
  
 }
 
 // Function: cosf (func_cosf)
 {
  Function::arg_iterator args = func_cosf->arg_begin();
  Value* float_x_93 = args++;
  float_x_93->setName("x");
  
  BasicBlock* label_94 = BasicBlock::Create(mod->getContext(), "",func_cosf,0);
  
  // Block  (label_94)
  AllocaInst* ptr_95 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_94);
  ptr_95->setAlignment(4);
  StoreInst* void_96 = new StoreInst(float_x_93, ptr_95, false, label_94);
  void_96->setAlignment(4);
  LoadInst* float_97 = new LoadInst(ptr_95, "", false, label_94);
  float_97->setAlignment(4);
  CastInst* double_98 = new FPExtInst(float_97, Type::getDoubleTy(mod->getContext()), "", label_94);
  CallInst* double_99 = CallInst::Create(func_cos, double_98, "", label_94);
  double_99->setCallingConv(CallingConv::C);
  double_99->setTailCall(false);
  AttributeSet double_99_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_99_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_99->setAttributes(double_99_PAL);
  
  CastInst* float_100 = new FPTruncInst(double_99, Type::getFloatTy(mod->getContext()), "", label_94);
  ReturnInst::Create(mod->getContext(), float_100, label_94);
  
 }
 
 // Function: coshf (func_coshf)
 {
  Function::arg_iterator args = func_coshf->arg_begin();
  Value* float_x_102 = args++;
  float_x_102->setName("x");
  
  BasicBlock* label_103 = BasicBlock::Create(mod->getContext(), "",func_coshf,0);
  
  // Block  (label_103)
  AllocaInst* ptr_104 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_103);
  ptr_104->setAlignment(4);
  StoreInst* void_105 = new StoreInst(float_x_102, ptr_104, false, label_103);
  void_105->setAlignment(4);
  LoadInst* float_106 = new LoadInst(ptr_104, "", false, label_103);
  float_106->setAlignment(4);
  CastInst* double_107 = new FPExtInst(float_106, Type::getDoubleTy(mod->getContext()), "", label_103);
  CallInst* double_108 = CallInst::Create(func_cosh, double_107, "", label_103);
  double_108->setCallingConv(CallingConv::C);
  double_108->setTailCall(false);
  AttributeSet double_108_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_108_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_108->setAttributes(double_108_PAL);
  
  CastInst* float_109 = new FPTruncInst(double_108, Type::getFloatTy(mod->getContext()), "", label_103);
  ReturnInst::Create(mod->getContext(), float_109, label_103);
  
 }
 
 // Function: expf (func_expf)
 {
  Function::arg_iterator args = func_expf->arg_begin();
  Value* float_x_111 = args++;
  float_x_111->setName("x");
  
  BasicBlock* label_112 = BasicBlock::Create(mod->getContext(), "",func_expf,0);
  
  // Block  (label_112)
  AllocaInst* ptr_113 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_112);
  ptr_113->setAlignment(4);
  StoreInst* void_114 = new StoreInst(float_x_111, ptr_113, false, label_112);
  void_114->setAlignment(4);
  LoadInst* float_115 = new LoadInst(ptr_113, "", false, label_112);
  float_115->setAlignment(4);
  CastInst* double_116 = new FPExtInst(float_115, Type::getDoubleTy(mod->getContext()), "", label_112);
  CallInst* double_117 = CallInst::Create(func_exp, double_116, "", label_112);
  double_117->setCallingConv(CallingConv::C);
  double_117->setTailCall(false);
  AttributeSet double_117_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_117_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_117->setAttributes(double_117_PAL);
  
  CastInst* float_118 = new FPTruncInst(double_117, Type::getFloatTy(mod->getContext()), "", label_112);
  ReturnInst::Create(mod->getContext(), float_118, label_112);
  
 }
 
 // Function: floorf (func_floorf)
 {
  Function::arg_iterator args = func_floorf->arg_begin();
  Value* float_x_120 = args++;
  float_x_120->setName("x");
  
  BasicBlock* label_121 = BasicBlock::Create(mod->getContext(), "",func_floorf,0);
  
  // Block  (label_121)
  AllocaInst* ptr_122 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_121);
  ptr_122->setAlignment(4);
  StoreInst* void_123 = new StoreInst(float_x_120, ptr_122, false, label_121);
  void_123->setAlignment(4);
  LoadInst* float_124 = new LoadInst(ptr_122, "", false, label_121);
  float_124->setAlignment(4);
  CastInst* double_125 = new FPExtInst(float_124, Type::getDoubleTy(mod->getContext()), "", label_121);
  CallInst* double_126 = CallInst::Create(func_floor, double_125, "", label_121);
  double_126->setCallingConv(CallingConv::C);
  double_126->setTailCall(false);
  AttributeSet double_126_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_126_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_126->setAttributes(double_126_PAL);
  
  CastInst* float_127 = new FPTruncInst(double_126, Type::getFloatTy(mod->getContext()), "", label_121);
  ReturnInst::Create(mod->getContext(), float_127, label_121);
  
 }
 
 // Function: fmodf (func_fmodf)
 {
  Function::arg_iterator args = func_fmodf->arg_begin();
  Value* float_x_129 = args++;
  float_x_129->setName("x");
  Value* float_y_130 = args++;
  float_y_130->setName("y");
  
  BasicBlock* label_131 = BasicBlock::Create(mod->getContext(), "",func_fmodf,0);
  
  // Block  (label_131)
  AllocaInst* ptr_132 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_131);
  ptr_132->setAlignment(4);
  AllocaInst* ptr_133 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_131);
  ptr_133->setAlignment(4);
  StoreInst* void_134 = new StoreInst(float_x_129, ptr_132, false, label_131);
  void_134->setAlignment(4);
  StoreInst* void_135 = new StoreInst(float_y_130, ptr_133, false, label_131);
  void_135->setAlignment(4);
  LoadInst* float_136 = new LoadInst(ptr_132, "", false, label_131);
  float_136->setAlignment(4);
  CastInst* double_137 = new FPExtInst(float_136, Type::getDoubleTy(mod->getContext()), "", label_131);
  LoadInst* float_138 = new LoadInst(ptr_133, "", false, label_131);
  float_138->setAlignment(4);
  CastInst* double_139 = new FPExtInst(float_138, Type::getDoubleTy(mod->getContext()), "", label_131);
  std::vector<Value*> double_140_params;
  double_140_params.push_back(double_137);
  double_140_params.push_back(double_139);
  CallInst* double_140 = CallInst::Create(func_fmod, double_140_params, "", label_131);
  double_140->setCallingConv(CallingConv::C);
  double_140->setTailCall(false);
  AttributeSet double_140_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_140_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_140->setAttributes(double_140_PAL);
  
  CastInst* float_141 = new FPTruncInst(double_140, Type::getFloatTy(mod->getContext()), "", label_131);
  ReturnInst::Create(mod->getContext(), float_141, label_131);
  
 }
 
 // Function: logf (func_logf)
 {
  Function::arg_iterator args = func_logf->arg_begin();
  Value* float_x_143 = args++;
  float_x_143->setName("x");
  
  BasicBlock* label_144 = BasicBlock::Create(mod->getContext(), "",func_logf,0);
  
  // Block  (label_144)
  AllocaInst* ptr_145 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_144);
  ptr_145->setAlignment(4);
  StoreInst* void_146 = new StoreInst(float_x_143, ptr_145, false, label_144);
  void_146->setAlignment(4);
  LoadInst* float_147 = new LoadInst(ptr_145, "", false, label_144);
  float_147->setAlignment(4);
  CastInst* double_148 = new FPExtInst(float_147, Type::getDoubleTy(mod->getContext()), "", label_144);
  CallInst* double_149 = CallInst::Create(func_log, double_148, "", label_144);
  double_149->setCallingConv(CallingConv::C);
  double_149->setTailCall(false);
  AttributeSet double_149_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_149_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_149->setAttributes(double_149_PAL);
  
  CastInst* float_150 = new FPTruncInst(double_149, Type::getFloatTy(mod->getContext()), "", label_144);
  ReturnInst::Create(mod->getContext(), float_150, label_144);
  
 }
 
 // Function: log10f (func_log10f)
 {
  Function::arg_iterator args = func_log10f->arg_begin();
  Value* float_x_152 = args++;
  float_x_152->setName("x");
  
  BasicBlock* label_153 = BasicBlock::Create(mod->getContext(), "",func_log10f,0);
  
  // Block  (label_153)
  AllocaInst* ptr_154 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_153);
  ptr_154->setAlignment(4);
  StoreInst* void_155 = new StoreInst(float_x_152, ptr_154, false, label_153);
  void_155->setAlignment(4);
  LoadInst* float_156 = new LoadInst(ptr_154, "", false, label_153);
  float_156->setAlignment(4);
  CastInst* double_157 = new FPExtInst(float_156, Type::getDoubleTy(mod->getContext()), "", label_153);
  CallInst* double_158 = CallInst::Create(func_log10, double_157, "", label_153);
  double_158->setCallingConv(CallingConv::C);
  double_158->setTailCall(false);
  AttributeSet double_158_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_158_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_158->setAttributes(double_158_PAL);
  
  CastInst* float_159 = new FPTruncInst(double_158, Type::getFloatTy(mod->getContext()), "", label_153);
  ReturnInst::Create(mod->getContext(), float_159, label_153);
  
 }
 
 // Function: powf (func_powf)
 {
  Function::arg_iterator args = func_powf->arg_begin();
  Value* float_x_161 = args++;
  float_x_161->setName("x");
  Value* float_y_162 = args++;
  float_y_162->setName("y");
  
  BasicBlock* label_163 = BasicBlock::Create(mod->getContext(), "",func_powf,0);
  
  // Block  (label_163)
  AllocaInst* ptr_164 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_163);
  ptr_164->setAlignment(4);
  AllocaInst* ptr_165 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_163);
  ptr_165->setAlignment(4);
  StoreInst* void_166 = new StoreInst(float_x_161, ptr_164, false, label_163);
  void_166->setAlignment(4);
  StoreInst* void_167 = new StoreInst(float_y_162, ptr_165, false, label_163);
  void_167->setAlignment(4);
  LoadInst* float_168 = new LoadInst(ptr_164, "", false, label_163);
  float_168->setAlignment(4);
  CastInst* double_169 = new FPExtInst(float_168, Type::getDoubleTy(mod->getContext()), "", label_163);
  LoadInst* float_170 = new LoadInst(ptr_165, "", false, label_163);
  float_170->setAlignment(4);
  CastInst* double_171 = new FPExtInst(float_170, Type::getDoubleTy(mod->getContext()), "", label_163);
  std::vector<Value*> double_172_params;
  double_172_params.push_back(double_169);
  double_172_params.push_back(double_171);
  CallInst* double_172 = CallInst::Create(func_llvm_pow_f64, double_172_params, "", label_163);
  double_172->setCallingConv(CallingConv::C);
  double_172->setTailCall(false);
  AttributeSet double_172_PAL;
  double_172->setAttributes(double_172_PAL);
  
  CastInst* float_173 = new FPTruncInst(double_172, Type::getFloatTy(mod->getContext()), "", label_163);
  ReturnInst::Create(mod->getContext(), float_173, label_163);
  
 }
 
 // Function: roundf (func_roundf)
 {
  Function::arg_iterator args = func_roundf->arg_begin();
  Value* float_x_175 = args++;
  float_x_175->setName("x");
  
  BasicBlock* label_176 = BasicBlock::Create(mod->getContext(), "",func_roundf,0);
  
  // Block  (label_176)
  AllocaInst* ptr_177 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_176);
  ptr_177->setAlignment(4);
  StoreInst* void_178 = new StoreInst(float_x_175, ptr_177, false, label_176);
  void_178->setAlignment(4);
  LoadInst* float_179 = new LoadInst(ptr_177, "", false, label_176);
  float_179->setAlignment(4);
  CastInst* double_180 = new FPExtInst(float_179, Type::getDoubleTy(mod->getContext()), "", label_176);
  CallInst* double_181 = CallInst::Create(func_round, double_180, "", label_176);
  double_181->setCallingConv(CallingConv::C);
  double_181->setTailCall(false);
  AttributeSet double_181_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_181_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_181->setAttributes(double_181_PAL);
  
  CastInst* float_182 = new FPTruncInst(double_181, Type::getFloatTy(mod->getContext()), "", label_176);
  ReturnInst::Create(mod->getContext(), float_182, label_176);
  
 }
 
 // Function: sinf (func_sinf)
 {
  Function::arg_iterator args = func_sinf->arg_begin();
  Value* float_x_184 = args++;
  float_x_184->setName("x");
  
  BasicBlock* label_185 = BasicBlock::Create(mod->getContext(), "",func_sinf,0);
  
  // Block  (label_185)
  AllocaInst* ptr_186 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_185);
  ptr_186->setAlignment(4);
  StoreInst* void_187 = new StoreInst(float_x_184, ptr_186, false, label_185);
  void_187->setAlignment(4);
  LoadInst* float_188 = new LoadInst(ptr_186, "", false, label_185);
  float_188->setAlignment(4);
  CastInst* double_189 = new FPExtInst(float_188, Type::getDoubleTy(mod->getContext()), "", label_185);
  CallInst* double_190 = CallInst::Create(func_sin, double_189, "", label_185);
  double_190->setCallingConv(CallingConv::C);
  double_190->setTailCall(false);
  AttributeSet double_190_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_190_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_190->setAttributes(double_190_PAL);
  
  CastInst* float_191 = new FPTruncInst(double_190, Type::getFloatTy(mod->getContext()), "", label_185);
  ReturnInst::Create(mod->getContext(), float_191, label_185);
  
 }
 
 // Function: sinhf (func_sinhf)
 {
  Function::arg_iterator args = func_sinhf->arg_begin();
  Value* float_x_193 = args++;
  float_x_193->setName("x");
  
  BasicBlock* label_194 = BasicBlock::Create(mod->getContext(), "",func_sinhf,0);
  
  // Block  (label_194)
  AllocaInst* ptr_195 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_194);
  ptr_195->setAlignment(4);
  StoreInst* void_196 = new StoreInst(float_x_193, ptr_195, false, label_194);
  void_196->setAlignment(4);
  LoadInst* float_197 = new LoadInst(ptr_195, "", false, label_194);
  float_197->setAlignment(4);
  CastInst* double_198 = new FPExtInst(float_197, Type::getDoubleTy(mod->getContext()), "", label_194);
  CallInst* double_199 = CallInst::Create(func_sinh, double_198, "", label_194);
  double_199->setCallingConv(CallingConv::C);
  double_199->setTailCall(false);
  AttributeSet double_199_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_199_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_199->setAttributes(double_199_PAL);
  
  CastInst* float_200 = new FPTruncInst(double_199, Type::getFloatTy(mod->getContext()), "", label_194);
  ReturnInst::Create(mod->getContext(), float_200, label_194);
  
 }
 
 // Function: sqrtf (func_sqrtf)
 {
  Function::arg_iterator args = func_sqrtf->arg_begin();
  Value* float_x_202 = args++;
  float_x_202->setName("x");
  
  BasicBlock* label_203 = BasicBlock::Create(mod->getContext(), "",func_sqrtf,0);
  
  // Block  (label_203)
  AllocaInst* ptr_204 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_203);
  ptr_204->setAlignment(4);
  StoreInst* void_205 = new StoreInst(float_x_202, ptr_204, false, label_203);
  void_205->setAlignment(4);
  LoadInst* float_206 = new LoadInst(ptr_204, "", false, label_203);
  float_206->setAlignment(4);
  CastInst* double_207 = new FPExtInst(float_206, Type::getDoubleTy(mod->getContext()), "", label_203);
  CallInst* double_208 = CallInst::Create(func_sqrt, double_207, "", label_203);
  double_208->setCallingConv(CallingConv::C);
  double_208->setTailCall(false);
  AttributeSet double_208_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_208_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_208->setAttributes(double_208_PAL);
  
  CastInst* float_209 = new FPTruncInst(double_208, Type::getFloatTy(mod->getContext()), "", label_203);
  ReturnInst::Create(mod->getContext(), float_209, label_203);
  
 }
 
 // Function: tanf (func_tanf)
 {
  Function::arg_iterator args = func_tanf->arg_begin();
  Value* float_x_211 = args++;
  float_x_211->setName("x");
  
  BasicBlock* label_212 = BasicBlock::Create(mod->getContext(), "",func_tanf,0);
  
  // Block  (label_212)
  AllocaInst* ptr_213 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_212);
  ptr_213->setAlignment(4);
  StoreInst* void_214 = new StoreInst(float_x_211, ptr_213, false, label_212);
  void_214->setAlignment(4);
  LoadInst* float_215 = new LoadInst(ptr_213, "", false, label_212);
  float_215->setAlignment(4);
  CastInst* double_216 = new FPExtInst(float_215, Type::getDoubleTy(mod->getContext()), "", label_212);
  CallInst* double_217 = CallInst::Create(func_tan, double_216, "", label_212);
  double_217->setCallingConv(CallingConv::C);
  double_217->setTailCall(false);
  AttributeSet double_217_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_217_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_217->setAttributes(double_217_PAL);
  
  CastInst* float_218 = new FPTruncInst(double_217, Type::getFloatTy(mod->getContext()), "", label_212);
  ReturnInst::Create(mod->getContext(), float_218, label_212);
  
 }
 
 // Function: tanhf (func_tanhf)
 {
  Function::arg_iterator args = func_tanhf->arg_begin();
  Value* float_x_220 = args++;
  float_x_220->setName("x");
  
  BasicBlock* label_221 = BasicBlock::Create(mod->getContext(), "",func_tanhf,0);
  
  // Block  (label_221)
  AllocaInst* ptr_222 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_221);
  ptr_222->setAlignment(4);
  StoreInst* void_223 = new StoreInst(float_x_220, ptr_222, false, label_221);
  void_223->setAlignment(4);
  LoadInst* float_224 = new LoadInst(ptr_222, "", false, label_221);
  float_224->setAlignment(4);
  CastInst* double_225 = new FPExtInst(float_224, Type::getDoubleTy(mod->getContext()), "", label_221);
  CallInst* double_226 = CallInst::Create(func_tanh, double_225, "", label_221);
  double_226->setCallingConv(CallingConv::C);
  double_226->setTailCall(false);
  AttributeSet double_226_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     B.addAttribute(Attribute::ReadNone);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   double_226_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  double_226->setAttributes(double_226_PAL);
  
  CastInst* float_227 = new FPTruncInst(double_226, Type::getFloatTy(mod->getContext()), "", label_221);
  ReturnInst::Create(mod->getContext(), float_227, label_221);
  
 }
 
 return mod;
}
