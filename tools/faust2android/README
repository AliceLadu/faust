/************************************************************************
 ************************************************************************
 FAUST Architecture File for Android
 Copyright (C) 2013 GRAME, Romain Michon, CCRMA - Stanford University
 Copyright (C) 2003-2013 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 
 This is sample code. This file is provided as an example of minimal
 FAUST architecture file. Redistribution and use in source and binary
 forms, with or without modification, in part or in full are permitted.
 In particular you can create a derived work of this FAUST architecture
 and distribute that work under terms of your choice.
 
 This sample code is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 ************************************************************************
 ************************************************************************/
 
 1- WHAT IS IT?
 
faust2android is a tool that turns a FAUST program into an Android application. Signal processing tasks as well as accessing the audio record and playback resources are done natively in C++ using the Android Native Development Toolkit (NDK). User interface and other components of the application are programmed in JAVA.

faust2android is only compatible with the most recent versions of Android, therefore the android device you'll use to execute the app must run at least Android 4.0.0. For better results, especially concerning audio latency, we strongly recommend you to use Android 4.2 (Jelly Bean). 

faust2android is still a work in progress. It should run both on Linux and on Mac OSX. It was mainly tested on a Google Nexus 7 so it is not warrantied that you wont encounter any issue (mainly about the UI) on another tablet/smartphone. If that happens, please contact me at rmichon AT ccrma DOT stanford DOT edu.

2- INSTALLATION

Although the best way to use faust2android is from the Faust Online Compiler (http://faust.grame.fr/index.php/online-examples) by choosing "android" in the Linux targets list, it is possible to install it with this package on your system. The following elements must be installed:
	- OpenJDK (or equivalent)
	- SWIG for JAVA (http://www.swig.org/) (eg. "sudo apt-get install swig" on Debian or "sudo port install swig" + "sudo port install swig-java "on OSX).
	- ANT (eg. "sudo apt-get install ant" on Debian or "sudo port install apache-ant" on OSX)

<<Port ant not found, uses apache-ant>>

	- You must copy the Android SDK (http://developer.android.com/sdk/index.html) 
<<OSX : http://dl.google.com/android/android-sdk_r21.1-macosx.zip>

somewhere on your hard drive and add to your path the /tools/ and the /platform-tools/ directories (eg. export PATH=$PATH:foo , etc.) in order to use the android tools in your terminal. If the Android SDK is already installed on your system, make sure that this is the latest version (android-API-17). <<<????>>>

	- You must copy the Android NDK (http://developer.android.com/tools/sdk/ndk/index.html) somewhere on your hard drive and add the environement variable "ANDROID_NDK_ROOT" pointing to this location to your bash profile (eg. add 'export ANDROID_NDK_ROOT="foo"' to .bashrc (~/.profile on OSX)). 

After that, you should be able to run faust2android from the package directory. You can copy it in a folder set in your path like /usr/local/bin/. If you choose to do so, don't forget to copy /src/ too. /src/ must always be in the same directory than faust2android.

3- USE

Usage: faust2android faustFile.dsp
	-install : once compilation is over, installs the generated app on the Android device connected to the computer.
	-eclipse : creates an eclipse project of the app in the current directory.

Any other options are considered as Faust options. To get a list of the Faust options type: faust -h.

4- SUPPORT

faudiostream-users AT lists DOT sourceforge DOT ne 		OR		rmichon AT ccrma DOT stanford DOT edu

5- ACKNOWLEDGEMENTS

Thanks to my CCRMA colleagues, Julius Smith, Victor Lazzarini and Yann Orlarey for their help!
