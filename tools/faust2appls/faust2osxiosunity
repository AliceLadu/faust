#! /bin/bash -e

#####################################################################
#                                                                   #
#  Compiles Faust programs to Unity audio plugins (OSX)	            #
#                                                                   #
#  (c) Grame, 2017                                                  #
#                                                                   #
#####################################################################
#
# Structure of a plugin for OSX
#--------------------------------
# libFaustPlugin_foo.bundle/
#	Contents/
#		MacOS/
#			AudioPluginFoo
#		Info.plist
#

CXXFLAGS="-I. -O3 -fPIC -arch i386 -arch x86_64"
LDFLAGS="-bundle"
CXX="c++"

createInfoPList() {
cat > "$2" << DELIM
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BuildMachineOSBuild</key>
	<string>16D32</string>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleExecutable</key>
	<string>$1</string>
	<key>CFBundleIdentifier</key>
	<string>com.yourcompany.$1</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$1</string>
	<key>CFBundlePackageType</key>
	<string>BNDL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleSupportedPlatforms</key>
	<array>
		<string>MacOSX</string>
	</array>
	<key>CFBundleVersion</key>
	<string>1</string>
	<key>CFPlugInDynamicRegisterFunction</key>
	<string></string>
	<key>CFPlugInDynamicRegistration</key>
	<string>NO</string>
	<key>CFPlugInFactories</key>
	<dict>
		<key>00000000-0000-0000-0000-000000000000</key>
		<string>MyFactoryFunction</string>
	</dict>
	<key>CFPlugInTypes</key>
	<dict>
		<key>00000000-0000-0000-0000-000000000000</key>
		<array>
			<string>00000000-0000-0000-0000-000000000000</string>
		</array>
	</dict>
	<key>CFPlugInUnloadFunction</key>
	<string></string>
	<key>DTCompiler</key>
	<string>com.apple.compilers.llvm.clang.1_0</string>
	<key>DTPlatformBuild</key>
	<string>8C1002</string>
	<key>DTPlatformVersion</key>
	<string>GM</string>
	<key>DTSDKBuild</key>
	<string>16C58</string>
	<key>DTSDKName</key>
	<string>macosx10.12</string>
	<key>DTXcode</key>
	<string>0821</string>
	<key>DTXcodeBuild</key>
	<string>8C1002</string>
</dict>
</plist>
DELIM
}

CUR=$(pwd)
SOURCE=0

for p in $@; do

    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2osxiosunity [-ios] <file1.dsp> [<file2.dsp>]"
        echo "Use '-ios' to create an iOS static library"
        echo "Use 'faust2unity -osx -ios' to also create the c# and JSON files"
        echo "See architecture/unity/README.md for more info"
        exit
    fi

    if [ $p = "-ios" ]; then
        IOS=1
        CXXFLAGS="-arch armv7 -arch armv7s -arch arm64 -pipe -O3 -gdwarf-2"
    elif [ $p = "-source" ]; then
        SOURCE=1
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi

done

for f in $FILES; do
	SRCDIR=$(dirname "$f")
    FNAME=$(basename "$f")
	NAME=${FNAME%.dsp}


    if [ "$IOS" = "1" ]; then

        if [ "$SOURCE" = "1" ]; then
            DIR=$SRCDIR/iOS
            if [ -d "$DIR" ]; then
                rm -rf "$DIR"
            fi
            mkdir "$DIR"
        fi

        # compiles faust to c++
        faust -i -a unity/unityplugin.cpp "$SRCDIR/$NAME.dsp" -o $NAME.cpp || (echo "$FNAME : Faust to C++ compilation failed in faust2osxiosunity -ios"; exit 1)


        $CXX $CXXFLAGS -DAPPLE -fembed-bitcode -DPLUGINNAME="libFaustPlugin_$NAME" -std=c++11 -stdlib=libc++ -c -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk $NAME.cpp -o $NAME.o || (echo "$FNAME : C++ to iOS library compilation failed in faust2osxiosunity -ios"; exit 1)
        libtool $NAME.o -o libFaustPlugin_$NAME.a
        rm $NAME.o $NAME.cpp

        if [ "$SOURCE" = "0" ]; then

            # unitypackage compression dir for iOS
            DIR=$(echo -n $RANDOM | md5)
            if [ -d "$DIR" ]; then
                rm -rf "$DIR"
            fi
            mkdir "$DIR"
            mv libFaustPlugin_$NAME.a $DIR/asset

            # pathname file for unitypackage compression
            echo "Assets/Plugins/FaustPlugin_$NAME/iOS/libFaustPlugin_$NAME.a" >> pathname
            mv ./pathname ./$DIR/pathname
            mv ./$DIR ./FaustPlugin_$NAME/$DIR
        else
            mv libFaustPlugin_$NAME.a $DIR/libFaustPlugin_$NAME.a
            mv $DIR $SRCDIR/FaustPlugin_$NAME/
        fi


echo "$FNAME : iOS compilation completed"

    else

        BNAME=libFaustPlugin_${NAME} # should be capitalize

        # creates a temporary dir
        TDR=$(mktemp -d faust.XXX)

        # creates the bundle inside
        BNDL="$TDR/$BNAME.bundle"
        MOS="$BNDL/Contents/MacOS/"
        mkdir -p "$MOS"

        if [ "$SOURCE" = "1" ]; then
            # creates final dir for source files
            DIR=$SRCDIR/OSX
            if [ -d "$DIR" ]; then
                rm -rf "$DIR"
            fi
            mkdir "$DIR"
        fi
        # compile faust to c++
        faust -i -a unity/unityplugin.cpp "$SRCDIR/$NAME.dsp" -o "$MOS/$NAME.cpp" || (echo "$FNAME : Faust to C++ compilation failed in faust2osxiosunity"; exit 1)

        $CXX $CXXFLAGS $LDFLAGS -DAPPLE -DPLUGINNAME="$NAME" "$MOS/$NAME.cpp" -o "$MOS/$BNAME" || (echo "$FNAME : C++ to OSX library compilation failed in faust2osxiosunity"; exit 1)
        rm "$MOS/$NAME.cpp"
        createInfoPList "$BNAME" "$BNDL/Contents/Info.plist" || (echo "$FNAME : Info.plist gerenation failed in faust2osxiosunity"; exit 1)

        rm -rf "$SRCDIR/$BNAME.bundle"

        if [ "$SOURCE" = "0" ]; then

            # unitypackage compression dir for MacOS lib
            DIR1=$(echo -n $RANDOM | md5)
            if [ -d "$DIR1" ]; then
            rm -rf "$DIR1"
            fi
            mkdir "$DIR1"
            mv "$MOS/$BNAME" "$SRCDIR/$DIR1/asset"

            # pathname file for unitypackage compression
            echo "Assets/Plugins/FaustPlugin_$NAME/MacOS/libFaustPlugin_$NAME.bundle/Contents/MacOS/$BNAME" >> pathname
            mv ./pathname ./$DIR1/pathname
            mv ./$DIR1 ./FaustPlugin_$NAME/$DIR1

            # unitypackage compression dir for Info.plist
            DIR2=$(echo -n $RANDOM | md5)
            if [ -d "$DIR2" ]; then
            rm -rf "$DIR2"
            fi
            mkdir "$DIR2"
            mv "$BNDL/Contents/Info.plist" "$SRCDIR/$DIR2/asset"
            rm -rf $TDR

            # pathname file for unitypackage compression
            echo "Assets/Plugins/FaustPlugin_$NAME/MacOS/libFaustPlugin_$NAME.bundle/Contents/Info.plist" >> pathname
            mv ./pathname ./$DIR2/pathname
            mv ./$DIR2 ./FaustPlugin_$NAME/$DIR2

        else
            mv "$BNDL" "$DIR/"
            mv "$DIR" "FaustPlugin_$NAME/$DIR"
            rm -rf $TDR
        fi

        echo "$FNAME : OSX compilation completed"

    fi

done
