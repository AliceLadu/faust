#! /bin/bash

. faustpath

#------------------------------------------------------------------------------
# Generates a folder with all available architecture libraries for faust unity
# plugin and the C# and JSON files required

#PHASE 1 : dispatch command arguments

ALL="1"
W32="0"
W64="0"
OSX="0"
IOS="0"
ANDROID="0"
LINUX="0"
SOURCE=""
SRC=0

for p in $@; do
    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2unity [-w32] .. [-android] [-source] <file1.dsp> [<file2.dsp>] .."
        echo "Generates a unity package (compressed .unitypackage folder) with all available architecture libraries for faust unity plugin and the C# file required. Use arguments to generate specific architectures"
        echo "Use -w32 to produce a Windows 32 bits library"
        echo "Use -w64 to produce a Windows 64 bits library"
        echo "Use -osx to produce a MACOSX library"
        echo "Use -ios to produce a iOS library"
        echo "Use -android to produce android libraries (armeabi-v7a and x86)."
        echo "Use -linux to produce a linux library"
        echo "Use -source to produce the source files (uncompressed folder)"
        echo "See architecture/unity/README.md for more info."
        exit
    fi
    if [ $p = "-w32" ]; then
        W32="1"
        ALL="0"
    elif [ $p = "-w64" ]; then
        W64="1"
        ALL="0"
    elif [ $p = "-osx" ]; then
        OSX="1"
        ALL="0"
    elif [ $p = "-ios" ]; then
        IOS="1"
        ALL="0"
    elif [ $p = "-android" ]; then
        ANDROID="1"
        ALL="0"
    elif [ $p = "-linux" ]; then
        LINUX="1"
        ALL="0"
    elif [ $p = "-source" ]; then
        SOURCE="-source"
        SRC="1"
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi
done

ARCHIVES=""

for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
    SRCDIR=$(dirname "$p")
    NAME=${f%.dsp}
    FNAME=FaustPlugin_$NAME
    DIR=$SRCDIR/$FNAME

    # creates final dir / overwrites it if already created
    if [ -d "$DIR" ]; then
        rm -rf "$DIR"
    fi
    mkdir "$DIR"

    # adds README to final dir
    cp $FAUSTLIB/unity/README.md $DIR/README.md

    if [ "$SRC" = "0" ]; then

        # unitypackage compression dir for README.md
        DIR1=$(echo -n $RANDOM | md5)
        if [ -d "$DIR1" ]; then
            rm -rf "$DIR1"
        fi
        mkdir "$DIR1"
        mv "$DIR/README.md" "$DIR1/asset"

        # pathname file for unitypackage compression
        echo "Assets/Plugins/$FNAME/README.md" >> pathname
        mv ./pathname ./$DIR1/pathname
        mv ./$DIR1 ./$DIR/
    fi


    # finds number of parameters
    faust -uim $f -o $NAME.cpp
    grep FAUST_ACTIVES $NAME.cpp > params.txt
    var1=$(cut -d" " -f3- params.txt)
    grep FAUST_PASSIVES $NAME.cpp > params.txt
    var2=$(cut -d" " -f3- params.txt)
    let "var=var1+var2"
    rm $NAME.cpp
    rm params.txt

    # compiles faust to c++ and json
    faust -json "$SRCDIR/$f" -o /dev/null;
    tr -d '\n' < $f.json > $NAME.json
    sed 's/\"/\\\\"/g;s/\//\\\//g' $NAME.json > $f.json
    JSON=$(<$f.json)


    # generates c# file
    sed -e "s/model/FaustPlugin_$NAME/g;s/plugname/libFaustPlugin_$NAME/g;s/_UI/_$NAME/g;s/Ctx/Context_$NAME/g;s/variables/$var/g;s/androidpluginname/FaustPlugin_$NAME/g;s/tototata/$JSON/g" $FAUSTLIB/unity/template.cs > $SRCDIR/$DIR/FaustPlugin_$NAME.cs

    rm -rf $NAME.json
    rm -rf $f.json

    if [ "$SRC" = "0" ]; then

        # unitypackage compression dir for C# file
        DIR2=$(echo -n $RANDOM | md5)
        if [ -d "$DIR2" ]; then
            rm -rf "$DIR2"
        fi
        mkdir "$DIR2"
        mv "$DIR/$FNAME.cs" "$DIR2/asset"

        # pathname file for unitypackage compression
        echo "Assets/Scripts/$FNAME.cs" >> pathname
        mv ./pathname ./$DIR2/pathname
        mv ./$DIR2 ./$DIR/
    fi

    # compiles c++ to binaries

    # w64
    if [ $W64 = "1" ] || [ $ALL = "1" ]; then
        faust2w64unity $SOURCE $f || exit
    fi

    # w32
    if [ $W32 = "1" ] || [ $ALL = "1" ]; then
            faust2w32unity $SOURCE $f || exit
    fi

    # macos
    if [ $OSX = "1" ] || [ $ALL = "1" ]; then
        faust2osxiosunity $SOURCE $f || exit
    fi

    # ios
    if [ $IOS = "1" ] || [ $ALL = "1" ]; then
        faust2osxiosunity -ios $SOURCE $f || exit
    fi

    # android
    if [ $ANDROID = "1" ] || [ $ALL = "1" ]; then
        faust2androidunity $SOURCE $f || exit
    fi

    # Linux
    if [ $LINUX = "1" ] || [ $ALL = "1" ]; then
        faust2linuxunity $SOURCE $f || exit
    fi

    if [ "$SRC" = "1" ]; then
        faust -i -a unityplugin.cpp $f -o $NAME.cpp
        mv "$NAME.cpp" "$FNAME/$NAME.cpp"
        cp "$f" "$FNAME/$f"
        SNAME=$FNAME\_sources
        mv "$FNAME" "$SNAME"
        ARCHIVES="$ARCHIVES$SNAME;"
    elif [ "$SRC" = "0" ]; then
        cd $FNAME
        tar zcvf FaustPlugin_$NAME.unitypackage * &> /dev/null
        ARCHIVES="$ARCHIVES$FNAME.unitypackage;"
        mv "$FNAME.unitypackage" ../
        cd ..
        rm -rf $DIR
    fi

done

echo "$ARCHIVES"
