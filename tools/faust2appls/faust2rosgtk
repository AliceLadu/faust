#! /bin/bash -e

#####################################################################
#                                                                   #
#               Compiles Faust programs to ROS packages             #
#               with a GTK interface                                #
#               (c) Grame, 2014                                     #
#                                                                   #
#####################################################################

. faustpath

ARCHFILE="jack-gtk-ros.cpp"

path=$(pwd)

# Dispatch command arguments
WORKSPACES=''
NEW_NAMES=''
params=("$@")
n=0
for p in $@; do
	n=$(($n+1))
    if [ "$p" = "-install" ]; then
	WORKSPACES="$WORKSPACES ${params[$n]}"
		
    elif [ "$p" = "-o" ]; then
	NEW_NAMES="$NEW_NAMES ${params[$n]}"
	
    elif [[ -f "$p" ]]; then
	    FILES="$FILES $p"
	
    else
	OPTIONS="$OPTIONS $p"        
    fi
done

# Puts option parameters in tables
NEW_NAMES=($NEW_NAMES)
WORKSPACES=($WORKSPACES)


# Get parameters tables size 
NAMES_LENGTH=${#NEW_NAMES[@]}
WS_LENGTH=${#WORKSPACES[@]}

# Check if packages exist ; if not, create them
i=0
for (( i = 0 ; i < $WS_LENGTH ; i=$i+1 ))
do  
    if [ ! -d ${WORKSPACES[${i}]} ]
    then
        mkdir -p ${WORKSPACES[${i}]}/src
    else 
        cd ${WORKSPACES[${i}]}
        if [ ! -d src ]
        then
        	mkdir src
        fi
    fi
    cd ${WORKSPACES[${i}]}/src
    if [ ! src/CMakeLists.txt ]; then
    catkin_init_workspace > /dev/null
    fi
    
    # Check if faust_msgs package exists ; if not, create it
    
    if [ ! -d faust_msgs ]
    then
  	catkin_create_pkg faust_msgs roscpp message_runtime message_generation std_msgs > /dev/null

	cd faust_msgs	  
  	    sed -i '/^#/ d' CMakeLists.txt 
	    sed -i '4,26 d' CMakeLists.txt
	    sed -i '4ifind_package(catkin REQUIRED COMPONENTS message_generation roscpp std_msgs)' CMakeLists.txt
	    sed -i '6iadd_message_files(FILES faust_param.msg)\' CMakeLists.txt
	    sed -i '8igenerate_messages(DEPENDENCIES std_msgs)' CMakeLists.txt
	    sed -i '10icatkin_package(CATKIN_DEPENDS message_runtime)' CMakeLists.txt
	    sed -i '12iinclude_directories(${catkin_INCLUDE_DIRS})' CMakeLists.txt
	    sed -i '13,21 d' CMakeLists.txt 
    fi
    if [ ! -d faust_msgs/msg ]    
    then
        mkdir msg
	cd msg
	    if [ ! -f faust_param.msg ]
	    then 
		>faust_param.msg
		echo 'float32 value' >> faust_param.msg
	    fi
    fi
    cd ${WORKSPACES[${i}]}
	catkin_make > /dev/null
	#echo "source ${WORKSPACES[${i}]}/devel/setup.bash" >> $HOME/.bashrc
done

# if there is only one workspace specified, no need to run a loop
if [ $WS_LENGTH = 1 ]   
then WORKSPACE_PATH="${WORKSPACES[$1]}"/src
fi

#-------------------------------------------------------------------
# compile the *.dsp files
#
i=0
   
    for p in $FILES
    do 

	# Check .dsp path ; if there is no path, file should be in curent directory
	temp=$(basename "$p")
	temp_path=$(dirname ${p})

	if [ ! $temp_path = '.' ]
	then
	    p=$temp
	    path=$temp_path
	fi
	
	# Create dsp package depending on options
	if [ "$NEW_NAMES" = "" ]
	then
	    f=$(basename "$p")
	    name="${f%.dsp}"
	else
	    name="${NEW_NAMES[${i}]}"
	fi
	name=$name"_gtk"
    	if [ $WS_LENGTH = 0 ] 
    	then
	    cd $HOME
	    	if [ ! -d $HOME/$name ]
		then
		    catkin_create_pkg $name roscpp faust_msgs > /dev/null
		fi
	
		PACKAGE_PATH=$HOME/$name
	else
	    if [ $WS_LENGTH = 1 ]
	    then
		cd $WORKSPACE_PATH
	    	    if [[ ! -d $WORKSPACE_PATH/$name ]]
		    then
			catkin_create_pkg $name roscpp faust_msgs > /dev/null

		    fi
		PACKAGE_PATH=$WORKSPACE_PATH/$name
	    
	    else 
	    
		WORKSPACE_PATH="${WORKSPACES[${i}]}"/src
		cd $WORKSPACE_PATH
	    	    if [ ! -d $WORKSPACE_PATH/$name ]
		    then
		    	catkin_create_pkg $name roscpp faust_msgs > /dev/null

		    fi
		PACKAGE_PATH=$WORKSPACE_PATH/$name
	    fi
	fi
	cd $PACKAGE_PATH
	    sed -i '/^#/ d' CMakeLists.txt 
    	    sed -i '4iset(CMAKE_INCLUDE_CURRENT_DIR ON)' CMakeLists.txt
    	    sed -i '5iset(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR})' CMakeLists.txt
    	    sed -i '6ifind_package(PkgConfig REQUIRED)' CMakeLists.txt
    	    sed -i '7ipkg_check_modules(GTK2 REQUIRED gtk+-2.0)' CMakeLists.txt
    	    sed -i '8iinclude_directories(${catkin_INCLUDE_DIRS} ${GTK2_INCLUDE_DIRS})' CMakeLists.txt
    	    sed -i '9ilink_directories(${GTK2_LIBRARY_DIRS})' CMakeLists.txt
    	    sed -i '14,30d' CMakeLists.txt
    	    sed -i '15iadd_executable(${PROJECT_NAME} src/${PROJECT_NAME}.cpp)' CMakeLists.txt
	    sed -i '17itarget_link_libraries(${PROJECT_NAME} ${GTK2_LIBRARIES} jack ${catkin_LIBRARIES})' CMakeLists.txt
	    sed -i '18,28d' CMakeLists.txt
	    
	# compile faust to c++
    	faust -i -a $ARCHFILE -o "$PACKAGE_PATH/src/$name.cpp" $path/$p	> /dev/null	
	if [ $WS_LENGTH = 0 ]
	then
	    cd $HOME
	    if [ ! -d faust_msgs ]
	    then
	        catkin_create_pkg faust_msgs roscpp message_runtime message_generation std_msgs > /dev/null

		    cd faust_msgs	  
	  		sed -i '/^#/ d' CMakeLists.txt 
    			sed -i '4,26 d' CMakeLists.txt
    			sed -i '4ifind_package(catkin REQUIRED COMPONENTS message_generation roscpp std_msgs)' CMakeLists.txt
    			sed -i '6iadd_message_files(FILES faust_param.msg)\' CMakeLists.txt
    			sed -i '8igenerate_messages(DEPENDENCIES std_msgs)' CMakeLists.txt
    			sed -i '10icatkin_package(CATKIN_DEPENDS message_runtime)' CMakeLists.txt
    			sed -i '12iinclude_directories(${catkin_INCLUDE_DIRS})' CMakeLists.txt
    			sed -i '13,21 d' CMakeLists.txt
    		    if [ ! -d faust_msgs/msg ]    
		    then
        		mkdir msg
			cd msg
			    if [ ! -f faust_param.msg ]
			    then 
				>faust_param.msg
				echo 'float32 value' >> faust_param.msg
			    fi
		    fi
    		cd $HOME
    		msg=faust_msgs
    		zip -r faust.zip $msg > /dev/null
	    fi
	    
	    zip -r faust.zip $name > /dev/null
	    rm -r $PACKAGE_PATH
	    OUTPUT="$OUTPUT faust.zip/$name;"
	else
	    #cd ${WORKSPACES[${i}]}
	    #    catkin_make
	    OUTPUT="$OUTPUT $name.cpp;"
	fi 

    i=$((i+1))

    done
if [ -d faust_msgs ]
then
    rm -r $msg
fi

echo $OUTPUT
	
