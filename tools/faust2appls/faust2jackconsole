#!/bin/bash

#-------------------------------------------------------------------
# Set Faust library (architecture-file) path

if [ -f $FAUST_LIB_PATH/music.lib ]
then
  FAUSTLIB=$FAUST_LIB_PATH
elif [ -f /usr/local/lib/faust/music.lib ]
then
  FAUSTLIB=/usr/local/lib/faust/
elif [ -f /usr/lib/faust/music.lib ]
then
  FAUSTLIB=/usr/lib/faust/
else
  error "$0: Cannot find Faust library dir (usually /usr/local/lib/faust)"
fi

#-------------------------------------------------------------------
# Set Faust include path

if [ -f $FAUST_INC_PATH/gui/GUI.h ]
then
  FAUSTINC=$FAUST_INC_PATH
elif [ -f /usr/local/include/faust/gui/GUI.h ]
then
  FAUSTINC=/usr/local/include/faust/
elif [ -f /usr/include/faust/gui/GUI.h ]
then
  FAUSTINC=/usr/include/faust/
else
  error "$0: Cannot find Faust include dir (usually /usr/local/include/faust)"
fi

#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# existing *.dsp files          -> FILES
#

for p in $@; do
    if [ $p = "-osc" ]; then
	 OSCDEFS="-DOSCCTRL -L$FAUSTLIB -lOSCFaust -loscpack"
    elif [ $p = "-httpd" ]; then
	 HTTPDEFS="-DHTTPCTRL -L$FAUSTLIB -lHTTPDFaust -lmicrohttpd"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -e "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"        
	fi
done

#-------------------------------------------------------------------
# compile the *.dsp files
#
for f in $FILES; do
    faust -a jack-console.cpp $OPTIONS $f -o $f.cpp
    g++  $f.cpp -I$FAUSTINC -ljack $OSCDEFS $HTTPDEFS -o  ${f%.dsp} 
    rm $f.cpp
done
