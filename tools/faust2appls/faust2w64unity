#! /bin/bash -e

#-------------------------------------------------------------------
#Dispatch command arguments

SOURCE="0"

for p in $@; do
    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2w64unity <file1.dsp> [<file2.dsp>]"
        echo "Creates Microsoft 64bits library for faust unity plugin."
        echo "Mingw crosscompiler should be installed ('mingw32' package on Ubuntu)."
        echo "Use 'faust2unity -w64' to also create the C# and JSON files"
        echo "See architecture/unity/README.md for more info"
        exit
    fi

    if [ $p = "-source" ]; then
        SOURCE="1"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"        
	fi
done

#-----------------------------------------------------------------------
# mingw crosscompiler should be installed ('mingw32' package on Ubuntu)
# the exact prefix should be specified in the environment variable MINGW

: ${MINGWPREFIX="x86_64-w64-mingw32-"}
CXX="${MINGWPREFIX}g++"
(which "$CXX" >/dev/null) || (echo "MingW compiler $CXX not found. See -help for more info."; exit 1)


#-------------------------------------------------------------------
# Compiler settings

CXXFLAGS="-O3 -mfpmath=sse -msse -ffast-math -Wl,--enable-auto-import"
LIB="-shared"
EXT=".dll"

#-------------------------------------------------------------------
# compile the *.dsp files
#
for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
    NAME=${f%.dsp}
    FNAME=FaustPlugin_$NAME
    SRCDIR=$(dirname "$p")
    DIR=x64

    # create a temporary dir
    TDR=$(mktemp -d faust.XXXXXX)
    TMP=$TDR/$NAME
    mkdir "$TMP"

    if [ "$SOURCE" = "1" ]; then
        # create final dir for source files
        if [ -d "$DIR" ]; then
            rm -rf "$DIR"
        fi
        mkdir "$DIR"
    fi

    # compile faust to c++
    faust -i -a unity/unityplugin.cpp $OPTIONS "$SRCDIR/$f" -o "$TMP/$NAME.cpp" || (echo "$f : Faust to C++ compilation failed in faust2w64unity"; exit 1)

    # compile c++ to binary
    (
        cd "$TMP"
		$CXX $CXXFLAGS $PROCARCH $LIB $OMP -static-libstdc++ -static-libgcc -Dmydsp=$NAME -o $FNAME$EXT $NAME.cpp
    ) > /dev/null || (echo "$f : C++ to w64 library compilation failed in faust2w64unity"; exit 1)

    rm -rf "$SRCDIR/$FNAME$EXT"

    if [ "$SOURCE" = "1" ]; then

        mv "$TMP/$FNAME$EXT" "$SRCDIR/$DIR/"
        mv "$DIR" "$FNAME/$DIR"
        rm -rf $TDR
        rm -rf $TMP
    else

        DIR=$(echo -n $RANDOM | md5)
        if [ -d "$DIR" ]; then
            rm -rf "$DIR"
        fi
        mkdir "$DIR"

        # unitypackage compression dir for x64
        mv "$TMP/$FNAME$EXT" "$SRCDIR/$DIR/asset"
        rm -rf "$TDR"
        rm -rf "$TMP"

        # pathname file for unitypackage compression
        echo "Assets/Plugins/FaustPlugin_$NAME/x64/libFaustPlugin_$NAME.dll" >> pathname
        mv ./pathname ./$DIR/pathname
        mv ./$DIR ./FaustPlugin_$NAME/$DIR
    fi

echo "$f : w64 compilation completed"
done



