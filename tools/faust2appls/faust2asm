#!/bin/bash

#-------------------------------------------------------------------
# Set Faust include path

if [ -f $FAUST_LIB_PATH/music.lib ]
then
  FAUSTLIB=$FAUST_LIB_PATH
elif [ -f /usr/local/lib/faust/music.lib ]
then
  FAUSTLIB=/usr/local/lib/faust/
elif [ -f /usr/lib/faust/music.lib ]
then
  FAUSTLIB=/usr/lib/faust/
else
  error "$0: Cannot find Faust library dir (usually /usr/local/lib/faust)"
fi


#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# existing *.dsp files          -> FILES
#

for p in $@; do
    if [ $p = "-osc" ]; then
	 OSCDEFS="-DOSCCTRL -L$FAUSTLIB -lOSCFaust -loscpack"
    elif [ $p = "-httpd" ]; then
	 HTTPDEFS="-DHTTPCTRL -L$FAUSTLIB -lHTTPDFaust -lmicrohttpd"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -e "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"        
	fi
done


#-------------------------------------------------------------------
# compile the *.dsp files
#
for f in $FILES; do
    name=${f%.dsp}
    
    # compile the C++ code
    faust -a $FAUSTLIB/webaudio/webaudio-asm.cpp -i -uim -cn $name $OPTIONS $f -o $name.cpp
    
    # compile the C++ code to asm.js
    emcc -O2 $name.cpp -s TOTAL_STACK=10485760 --pre-js $FAUSTLIB/webaudio/webaudio-asm-header.js --post-js $FAUSTLIB/webaudio/webaudio-asm-footer.js -o $name-temp.js \
        -s EXPORTED_FUNCTIONS="['_"$name"_constructor','_"$name"_destructor','_"$name"_compute', '_"$name"_getNumInputs', '_"$name"_getNumOutputs', '_"$name"_setValue', '_"$name"_getValue', '_"$name"_getJSON']"
    
    # compose the asm.js code
    sed -e "s/DSP/"$name"/g" $name-temp.js > $name.js
    
    rm $name-temp.js
    rm $name.cpp
done
